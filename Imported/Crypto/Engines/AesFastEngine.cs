// Decompiled with JetBrains decompiler
// Type: Org.BouncyCastle.Crypto.Engines.AesFastEngine
// Assembly: BouncyCastle.Crypto, Version=1.8.1.0, Culture=neutral, PublicKeyToken=0e99375e54769942
// MVID: 2C1E8153-B25B-4CDE-9676-EEDAF8A00392
// Assembly location: C:\Users\MÜRVET YÜZDEN ŞEN\Downloads\BouncyCastle.Crypto.dll

using Org.BouncyCastle.Crypto.Parameters;
using Org.BouncyCastle.Crypto.Utilities;
using Org.BouncyCastle.Utilities;

namespace Org.BouncyCastle.Crypto.Engines
{
    public class AesFastEngine : IBlockCipher
    {
        private const uint m1 = 2155905152;
        private const uint m2 = 2139062143;
        private const uint m3 = 27;
        private const uint m4 = 3233857728;
        private const uint m5 = 1061109567;
        private const int BLOCK_SIZE = 16;
        private static readonly byte[] S = new byte[256]
        {
       99,
       124,
       119,
       123,
       242,
       107,
       111,
       197,
       48,
       1,
       103,
       43,
       254,
       215,
       171,
       118,
       202,
       130,
       201,
       125,
       250,
       89,
       71,
       240,
       173,
       212,
       162,
       175,
       156,
       164,
       114,
       192,
       183,
       253,
       147,
       38,
       54,
       63,
       247,
       204,
       52,
       165,
       229,
       241,
       113,
       216,
       49,
       21,
       4,
       199,
       35,
       195,
       24,
       150,
       5,
       154,
       7,
       18,
       128,
       226,
       235,
       39,
       178,
       117,
       9,
       131,
       44,
       26,
       27,
       110,
       90,
       160,
       82,
       59,
       214,
       179,
       41,
       227,
       47,
       132,
       83,
       209,
       0,
       237,
       32,
       252,
       177,
       91,
       106,
       203,
       190,
       57,
       74,
       76,
       88,
       207,
       208,
       239,
       170,
       251,
       67,
       77,
       51,
       133,
       69,
       249,
       2,
       127,
       80,
       60,
       159,
       168,
       81,
       163,
       64,
       143,
       146,
       157,
       56,
       245,
       188,
       182,
       218,
       33,
       16,
      byte.MaxValue,
       243,
       210,
       205,
       12,
       19,
       236,
       95,
       151,
       68,
       23,
       196,
       167,
       126,
       61,
       100,
       93,
       25,
       115,
       96,
       129,
       79,
       220,
       34,
       42,
       144,
       136,
       70,
       238,
       184,
       20,
       222,
       94,
       11,
       219,
       224,
       50,
       58,
       10,
       73,
       6,
       36,
       92,
       194,
       211,
       172,
       98,
       145,
       149,
       228,
       121,
       231,
       200,
       55,
       109,
       141,
       213,
       78,
       169,
       108,
       86,
       244,
       234,
       101,
       122,
       174,
       8,
       186,
       120,
       37,
       46,
       28,
       166,
       180,
       198,
       232,
       221,
       116,
       31,
       75,
       189,
       139,
       138,
       112,
       62,
       181,
       102,
       72,
       3,
       246,
       14,
       97,
       53,
       87,
       185,
       134,
       193,
       29,
       158,
       225,
       248,
       152,
       17,
       105,
       217,
       142,
       148,
       155,
       30,
       135,
       233,
       206,
       85,
       40,
       223,
       140,
       161,
       137,
       13,
       191,
       230,
       66,
       104,
       65,
       153,
       45,
       15,
       176,
       84,
       187,
       22
        };
        private static readonly byte[] Si = new byte[256]
        {
       82,
       9,
       106,
       213,
       48,
       54,
       165,
       56,
       191,
       64,
       163,
       158,
       129,
       243,
       215,
       251,
       124,
       227,
       57,
       130,
       155,
       47,
      byte.MaxValue,
       135,
       52,
       142,
       67,
       68,
       196,
       222,
       233,
       203,
       84,
       123,
       148,
       50,
       166,
       194,
       35,
       61,
       238,
       76,
       149,
       11,
       66,
       250,
       195,
       78,
       8,
       46,
       161,
       102,
       40,
       217,
       36,
       178,
       118,
       91,
       162,
       73,
       109,
       139,
       209,
       37,
       114,
       248,
       246,
       100,
       134,
       104,
       152,
       22,
       212,
       164,
       92,
       204,
       93,
       101,
       182,
       146,
       108,
       112,
       72,
       80,
       253,
       237,
       185,
       218,
       94,
       21,
       70,
       87,
       167,
       141,
       157,
       132,
       144,
       216,
       171,
       0,
       140,
       188,
       211,
       10,
       247,
       228,
       88,
       5,
       184,
       179,
       69,
       6,
       208,
       44,
       30,
       143,
       202,
       63,
       15,
       2,
       193,
       175,
       189,
       3,
       1,
       19,
       138,
       107,
       58,
       145,
       17,
       65,
       79,
       103,
       220,
       234,
       151,
       242,
       207,
       206,
       240,
       180,
       230,
       115,
       150,
       172,
       116,
       34,
       231,
       173,
       53,
       133,
       226,
       249,
       55,
       232,
       28,
       117,
       223,
       110,
       71,
       241,
       26,
       113,
       29,
       41,
       197,
       137,
       111,
       183,
       98,
       14,
       170,
       24,
       190,
       27,
       252,
       86,
       62,
       75,
       198,
       210,
       121,
       32,
       154,
       219,
       192,
       254,
       120,
       205,
       90,
       244,
       31,
       221,
       168,
       51,
       136,
       7,
       199,
       49,
       177,
       18,
       16,
       89,
       39,
       128,
       236,
       95,
       96,
       81,
       127,
       169,
       25,
       181,
       74,
       13,
       45,
       229,
       122,
       159,
       147,
       201,
       156,
       239,
       160,
       224,
       59,
       77,
       174,
       42,
       245,
       176,
       200,
       235,
       187,
       60,
       131,
       83,
       153,
       97,
       23,
       43,
       4,
       126,
       186,
       119,
       214,
       38,
       225,
       105,
       20,
       99,
       85,
       33,
       12,
       125
        };
        private static readonly byte[] rcon = new byte[30]
        {
       1,
       2,
       4,
       8,
       16,
       32,
       64,
       128,
       27,
       54,
       108,
       216,
       171,
       77,
       154,
       47,
       94,
       188,
       99,
       198,
       151,
       53,
       106,
       212,
       179,
       125,
       250,
       239,
       197,
       145
        };
        private static readonly uint[] T0 = new uint[256]
        {
      2774754246U,
      2222750968U,
      2574743534U,
      2373680118U,
      234025727U,
      3177933782U,
      2976870366U,
      1422247313U,
      1345335392U,
      50397442U,
      2842126286U,
      2099981142U,
      436141799U,
      1658312629U,
      3870010189U,
      2591454956U,
      1170918031U,
      2642575903U,
      1086966153U,
      2273148410U,
      368769775U,
      3948501426U,
      3376891790U,
      200339707U,
      3970805057U,
      1742001331U,
      4255294047U,
      3937382213U,
      3214711843U,
      4154762323U,
      2524082916U,
      1539358875U,
      3266819957U,
      486407649U,
      2928907069U,
      1780885068U,
      1513502316U,
      1094664062U,
      49805301U,
      1338821763U,
      1546925160U,
      4104496465U,
      887481809U,
      150073849U,
      2473685474U,
      1943591083U,
      1395732834U,
      1058346282U,
      201589768U,
      1388824469U,
      1696801606U,
      1589887901U,
      672667696U,
      2711000631U,
      251987210U,
      3046808111U,
      151455502U,
      907153956U,
      2608889883U,
      1038279391U,
      652995533U,
      1764173646U,
      3451040383U,
      2675275242U,
      453576978U,
      2659418909U,
      1949051992U,
      773462580U,
      756751158U,
      2993581788U,
      3998898868U,
      4221608027U,
      4132590244U,
      1295727478U,
      1641469623U,
      3467883389U,
      2066295122U,
      1055122397U,
      1898917726U,
      2542044179U,
      4115878822U,
      1758581177U,
      0U,
      753790401U,
      1612718144U,
      536673507U,
      3367088505U,
      3982187446U,
      3194645204U,
      1187761037U,
      3653156455U,
      1262041458U,
      3729410708U,
      3561770136U,
      3898103984U,
      1255133061U,
      1808847035U,
      720367557U,
      3853167183U,
      385612781U,
      3309519750U,
      3612167578U,
      1429418854U,
      2491778321U,
      3477423498U,
      284817897U,
      100794884U,
      2172616702U,
      4031795360U,
      1144798328U,
      3131023141U,
      3819481163U,
      4082192802U,
      4272137053U,
      3225436288U,
      2324664069U,
      2912064063U,
      3164445985U,
      1211644016U,
      83228145U,
      3753688163U,
      3249976951U,
      1977277103U,
      1663115586U,
      806359072U,
      452984805U,
      250868733U,
      1842533055U,
      1288555905U,
      336333848U,
      890442534U,
      804056259U,
      3781124030U,
      2727843637U,
      3427026056U,
      957814574U,
      1472513171U,
      4071073621U,
      2189328124U,
      1195195770U,
      2892260552U,
      3881655738U,
      723065138U,
      2507371494U,
      2690670784U,
      2558624025U,
      3511635870U,
      2145180835U,
      1713513028U,
      2116692564U,
      2878378043U,
      2206763019U,
      3393603212U,
      703524551U,
      3552098411U,
      1007948840U,
      2044649127U,
      3797835452U,
      487262998U,
      1994120109U,
      1004593371U,
      1446130276U,
      1312438900U,
      503974420U,
      3679013266U,
      168166924U,
      1814307912U,
      3831258296U,
      1573044895U,
      1859376061U,
      4021070915U,
      2791465668U,
      2828112185U,
      2761266481U,
      937747667U,
      2339994098U,
      854058965U,
      1137232011U,
      1496790894U,
      3077402074U,
      2358086913U,
      1691735473U,
      3528347292U,
      3769215305U,
      3027004632U,
      4199962284U,
      133494003U,
      636152527U,
      2942657994U,
      2390391540U,
      3920539207U,
      403179536U,
      3585784431U,
      2289596656U,
      1864705354U,
      1915629148U,
      605822008U,
      4054230615U,
      3350508659U,
      1371981463U,
      602466507U,
      2094914977U,
      2624877800U,
      555687742U,
      3712699286U,
      3703422305U,
      2257292045U,
      2240449039U,
      2423288032U,
      1111375484U,
      3300242801U,
      2858837708U,
      3628615824U,
      84083462U,
      32962295U,
      302911004U,
      2741068226U,
      1597322602U,
      4183250862U,
      3501832553U,
      2441512471U,
      1489093017U,
      656219450U,
      3114180135U,
      954327513U,
      335083755U,
      3013122091U,
      856756514U,
      3144247762U,
      1893325225U,
      2307821063U,
      2811532339U,
      3063651117U,
      572399164U,
      2458355477U,
      552200649U,
      1238290055U,
      4283782570U,
      2015897680U,
      2061492133U,
      2408352771U,
      4171342169U,
      2156497161U,
      386731290U,
      3669999461U,
      837215959U,
      3326231172U,
      3093850320U,
      3275833730U,
      2962856233U,
      1999449434U,
      286199582U,
      3417354363U,
      4233385128U,
      3602627437U,
      974525996U
        };
        private static readonly uint[] T1 = new uint[256]
        {
      1667483301U,
      2088564868U,
      2004348569U,
      2071721613U,
      4076011277U,
      1802229437U,
      1869602481U,
      3318059348U,
      808476752U,
      16843267U,
      1734856361U,
      724260477U,
      4278118169U,
      3621238114U,
      2880130534U,
      1987505306U,
      3402272581U,
      2189565853U,
      3385428288U,
      2105408135U,
      4210749205U,
      1499050731U,
      1195871945U,
      4042324747U,
      2913812972U,
      3570709351U,
      2728550397U,
      2947499498U,
      2627478463U,
      2762232823U,
      1920132246U,
      3233848155U,
      3082253762U,
      4261273884U,
      2475900334U,
      640044138U,
      909536346U,
      1061125697U,
      4160222466U,
      3435955023U,
      875849820U,
      2779075060U,
      3857043764U,
      4059166984U,
      1903288979U,
      3638078323U,
      825320019U,
      353708607U,
      67373068U,
      3351745874U,
      589514341U,
      3284376926U,
      404238376U,
      2526427041U,
      84216335U,
      2593796021U,
      117902857U,
      303178806U,
      2155879323U,
      3806519101U,
      3958099238U,
      656887401U,
      2998042573U,
      1970662047U,
      151589403U,
      2206408094U,
      741103732U,
      437924910U,
      454768173U,
      1852759218U,
      1515893998U,
      2694863867U,
      1381147894U,
      993752653U,
      3604395873U,
      3014884814U,
      690573947U,
      3823361342U,
      791633521U,
      2223248279U,
      1397991157U,
      3520182632U,
      0U,
      3991781676U,
      538984544U,
      4244431647U,
      2981198280U,
      1532737261U,
      1785386174U,
      3419114822U,
      3200149465U,
      960066123U,
      1246401758U,
      1280088276U,
      1482207464U,
      3486483786U,
      3503340395U,
      4025468202U,
      2863288293U,
      4227591446U,
      1128498885U,
      1296931543U,
      859006549U,
      2240090516U,
      1162185423U,
      4193904912U,
      33686534U,
      2139094657U,
      1347461360U,
      1010595908U,
      2678007226U,
      2829601763U,
      1364304627U,
      2745392638U,
      1077969088U,
      2408514954U,
      2459058093U,
      2644320700U,
      943222856U,
      4126535940U,
      3166462943U,
      3065411521U,
      3671764853U,
      555827811U,
      269492272U,
      4294960410U,
      4092853518U,
      3537026925U,
      3452797260U,
      202119188U,
      320022069U,
      3974939439U,
      1600110305U,
      2543269282U,
      1145342156U,
      387395129U,
      3301217111U,
      2812761586U,
      2122251394U,
      1027439175U,
      1684326572U,
      1566423783U,
      421081643U,
      1936975509U,
      1616953504U,
      2172721560U,
      1330618065U,
      3705447295U,
      572671078U,
      707417214U,
      2425371563U,
      2290617219U,
      1179028682U,
      4008625961U,
      3099093971U,
      336865340U,
      3739133817U,
      1583267042U,
      185275933U,
      3688607094U,
      3772832571U,
      842163286U,
      976909390U,
      168432670U,
      1229558491U,
      101059594U,
      606357612U,
      1549580516U,
      3267534685U,
      3553869166U,
      2896970735U,
      1650640038U,
      2442213800U,
      2509582756U,
      3840201527U,
      2038035083U,
      3890730290U,
      3368586051U,
      926379609U,
      1835915959U,
      2374828428U,
      3587551588U,
      1313774802U,
      2846444000U,
      1819072692U,
      1448520954U,
      4109693703U,
      3941256997U,
      1701169839U,
      2054878350U,
      2930657257U,
      134746136U,
      3132780501U,
      2021191816U,
      623200879U,
      774790258U,
      471611428U,
      2795919345U,
      3031724999U,
      3334903633U,
      3907570467U,
      3722289532U,
      1953818780U,
      522141217U,
      1263245021U,
      3183305180U,
      2341145990U,
      2324303749U,
      1886445712U,
      1044282434U,
      3048567236U,
      1718013098U,
      1212715224U,
      50529797U,
      4143380225U,
      235805714U,
      1633796771U,
      892693087U,
      1465364217U,
      3115936208U,
      2256934801U,
      3250690392U,
      488454695U,
      2661164985U,
      3789674808U,
      4177062675U,
      2560109491U,
      286335539U,
      1768542907U,
      3654920560U,
      2391672713U,
      2492740519U,
      2610638262U,
      505297954U,
      2273777042U,
      3924412704U,
      3469641545U,
      1431677695U,
      673730680U,
      3755976058U,
      2357986191U,
      2711706104U,
      2307459456U,
      218962455U,
      3216991706U,
      3873888049U,
      1111655622U,
      1751699640U,
      1094812355U,
      2576951728U,
      757946999U,
      252648977U,
      2964356043U,
      1414834428U,
      3149622742U,
      370551866U
        };
        private static readonly uint[] T2 = new uint[256]
        {
      1673962851U,
      2096661628U,
      2012125559U,
      2079755643U,
      4076801522U,
      1809235307U,
      1876865391U,
      3314635973U,
      811618352U,
      16909057U,
      1741597031U,
      727088427U,
      4276558334U,
      3618988759U,
      2874009259U,
      1995217526U,
      3398387146U,
      2183110018U,
      3381215433U,
      2113570685U,
      4209972730U,
      1504897881U,
      1200539975U,
      4042984432U,
      2906778797U,
      3568527316U,
      2724199842U,
      2940594863U,
      2619588508U,
      2756966308U,
      1927583346U,
      3231407040U,
      3077948087U,
      4259388669U,
      2470293139U,
      642542118U,
      913070646U,
      1065238847U,
      4160029431U,
      3431157708U,
      879254580U,
      2773611685U,
      3855693029U,
      4059629809U,
      1910674289U,
      3635114968U,
      828527409U,
      355090197U,
      67636228U,
      3348452039U,
      591815971U,
      3281870531U,
      405809176U,
      2520228246U,
      84545285U,
      2586817946U,
      118360327U,
      304363026U,
      2149292928U,
      3806281186U,
      3956090603U,
      659450151U,
      2994720178U,
      1978310517U,
      152181513U,
      2199756419U,
      743994412U,
      439627290U,
      456535323U,
      1859957358U,
      1521806938U,
      2690382752U,
      1386542674U,
      997608763U,
      3602342358U,
      3011366579U,
      693271337U,
      3822927587U,
      794718511U,
      2215876484U,
      1403450707U,
      3518589137U,
      0U,
      3988860141U,
      541089824U,
      4242743292U,
      2977548465U,
      1538714971U,
      1792327274U,
      3415033547U,
      3194476990U,
      963791673U,
      1251270218U,
      1285084236U,
      1487988824U,
      3481619151U,
      3501943760U,
      4022676207U,
      2857362858U,
      4226619131U,
      1132905795U,
      1301993293U,
      862344499U,
      2232521861U,
      1166724933U,
      4192801017U,
      33818114U,
      2147385727U,
      1352724560U,
      1014514748U,
      2670049951U,
      2823545768U,
      1369633617U,
      2740846243U,
      1082179648U,
      2399505039U,
      2453646738U,
      2636233885U,
      946882616U,
      4126213365U,
      3160661948U,
      3061301686U,
      3668932058U,
      557998881U,
      270544912U,
      4293204735U,
      4093447923U,
      3535760850U,
      3447803085U,
      202904588U,
      321271059U,
      3972214764U,
      1606345055U,
      2536874647U,
      1149815876U,
      388905239U,
      3297990596U,
      2807427751U,
      2130477694U,
      1031423805U,
      1690872932U,
      1572530013U,
      422718233U,
      1944491379U,
      1623236704U,
      2165938305U,
      1335808335U,
      3701702620U,
      574907938U,
      710180394U,
      2419829648U,
      2282455944U,
      1183631942U,
      4006029806U,
      3094074296U,
      338181140U,
      3735517662U,
      1589437022U,
      185998603U,
      3685578459U,
      3772464096U,
      845436466U,
      980700730U,
      169090570U,
      1234361161U,
      101452294U,
      608726052U,
      1555620956U,
      3265224130U,
      3552407251U,
      2890133420U,
      1657054818U,
      2436475025U,
      2503058581U,
      3839047652U,
      2045938553U,
      3889509095U,
      3364570056U,
      929978679U,
      1843050349U,
      2365688973U,
      3585172693U,
      1318900302U,
      2840191145U,
      1826141292U,
      1454176854U,
      4109567988U,
      3939444202U,
      1707781989U,
      2062847610U,
      2923948462U,
      135272456U,
      3127891386U,
      2029029496U,
      625635109U,
      777810478U,
      473441308U,
      2790781350U,
      3027486644U,
      3331805638U,
      3905627112U,
      3718347997U,
      1961401460U,
      524165407U,
      1268178251U,
      3177307325U,
      2332919435U,
      2316273034U,
      1893765232U,
      1048330814U,
      3044132021U,
      1724688998U,
      1217452104U,
      50726147U,
      4143383030U,
      236720654U,
      1640145761U,
      896163637U,
      1471084887U,
      3110719673U,
      2249691526U,
      3248052417U,
      490350365U,
      2653403550U,
      3789109473U,
      4176155640U,
      2553000856U,
      287453969U,
      1775418217U,
      3651760345U,
      2382858638U,
      2486413204U,
      2603464347U,
      507257374U,
      2266337927U,
      3922272489U,
      3464972750U,
      1437269845U,
      676362280U,
      3752164063U,
      2349043596U,
      2707028129U,
      2299101321U,
      219813645U,
      3211123391U,
      3872862694U,
      1115997762U,
      1758509160U,
      1099088705U,
      2569646233U,
      760903469U,
      253628687U,
      2960903088U,
      1420360788U,
      3144537787U,
      371997206U
        };
        private static readonly uint[] T3 = new uint[256]
        {
      3332727651U,
      4169432188U,
      4003034999U,
      4136467323U,
      4279104242U,
      3602738027U,
      3736170351U,
      2438251973U,
      1615867952U,
      33751297U,
      3467208551U,
      1451043627U,
      3877240574U,
      3043153879U,
      1306962859U,
      3969545846U,
      2403715786U,
      530416258U,
      2302724553U,
      4203183485U,
      4011195130U,
      3001768281U,
      2395555655U,
      4211863792U,
      1106029997U,
      3009926356U,
      1610457762U,
      1173008303U,
      599760028U,
      1408738468U,
      3835064946U,
      2606481600U,
      1975695287U,
      3776773629U,
      1034851219U,
      1282024998U,
      1817851446U,
      2118205247U,
      4110612471U,
      2203045068U,
      1750873140U,
      1374987685U,
      3509904869U,
      4178113009U,
      3801313649U,
      2876496088U,
      1649619249U,
      708777237U,
      135005188U,
      2505230279U,
      1181033251U,
      2640233411U,
      807933976U,
      933336726U,
      168756485U,
      800430746U,
      235472647U,
      607523346U,
      463175808U,
      3745374946U,
      3441880043U,
      1315514151U,
      2144187058U,
      3936318837U,
      303761673U,
      496927619U,
      1484008492U,
      875436570U,
      908925723U,
      3702681198U,
      3035519578U,
      1543217312U,
      2767606354U,
      1984772923U,
      3076642518U,
      2110698419U,
      1383803177U,
      3711886307U,
      1584475951U,
      328696964U,
      2801095507U,
      3110654417U,
      0U,
      3240947181U,
      1080041504U,
      3810524412U,
      2043195825U,
      3069008731U,
      3569248874U,
      2370227147U,
      1742323390U,
      1917532473U,
      2497595978U,
      2564049996U,
      2968016984U,
      2236272591U,
      3144405200U,
      3307925487U,
      1340451498U,
      3977706491U,
      2261074755U,
      2597801293U,
      1716859699U,
      294946181U,
      2328839493U,
      3910203897U,
      67502594U,
      4269899647U,
      2700103760U,
      2017737788U,
      632987551U,
      1273211048U,
      2733855057U,
      1576969123U,
      2160083008U,
      92966799U,
      1068339858U,
      566009245U,
      1883781176U,
      4043634165U,
      1675607228U,
      2009183926U,
      2943736538U,
      1113792801U,
      540020752U,
      3843751935U,
      4245615603U,
      3211645650U,
      2169294285U,
      403966988U,
      641012499U,
      3274697964U,
      3202441055U,
      899848087U,
      2295088196U,
      775493399U,
      2472002756U,
      1441965991U,
      4236410494U,
      2051489085U,
      3366741092U,
      3135724893U,
      841685273U,
      3868554099U,
      3231735904U,
      429425025U,
      2664517455U,
      2743065820U,
      1147544098U,
      1417554474U,
      1001099408U,
      193169544U,
      2362066502U,
      3341414126U,
      1809037496U,
      675025940U,
      2809781982U,
      3168951902U,
      371002123U,
      2910247899U,
      3678134496U,
      1683370546U,
      1951283770U,
      337512970U,
      2463844681U,
      201983494U,
      1215046692U,
      3101973596U,
      2673722050U,
      3178157011U,
      1139780780U,
      3299238498U,
      967348625U,
      832869781U,
      3543655652U,
      4069226873U,
      3576883175U,
      2336475336U,
      1851340599U,
      3669454189U,
      25988493U,
      2976175573U,
      2631028302U,
      1239460265U,
      3635702892U,
      2902087254U,
      4077384948U,
      3475368682U,
      3400492389U,
      4102978170U,
      1206496942U,
      270010376U,
      1876277946U,
      4035475576U,
      1248797989U,
      1550986798U,
      941890588U,
      1475454630U,
      1942467764U,
      2538718918U,
      3408128232U,
      2709315037U,
      3902567540U,
      1042358047U,
      2531085131U,
      1641856445U,
      226921355U,
      260409994U,
      3767562352U,
      2084716094U,
      1908716981U,
      3433719398U,
      2430093384U,
      100991747U,
      4144101110U,
      470945294U,
      3265487201U,
      1784624437U,
      2935576407U,
      1775286713U,
      395413126U,
      2572730817U,
      975641885U,
      666476190U,
      3644383713U,
      3943954680U,
      733190296U,
      573772049U,
      3535497577U,
      2842745305U,
      126455438U,
      866620564U,
      766942107U,
      1008868894U,
      361924487U,
      3374377449U,
      2269761230U,
      2868860245U,
      1350051880U,
      2776293343U,
      59739276U,
      1509466529U,
      159418761U,
      437718285U,
      1708834751U,
      3610371814U,
      2227585602U,
      3501746280U,
      2193834305U,
      699439513U,
      1517759789U,
      504434447U,
      2076946608U,
      2835108948U,
      1842789307U,
      742004246U
        };
        private static readonly uint[] Tinv0 = new uint[256]
        {
      1353184337U,
      1399144830U,
      3282310938U,
      2522752826U,
      3412831035U,
      4047871263U,
      2874735276U,
      2466505547U,
      1442459680U,
      4134368941U,
      2440481928U,
      625738485U,
      4242007375U,
      3620416197U,
      2151953702U,
      2409849525U,
      1230680542U,
      1729870373U,
      2551114309U,
      3787521629U,
      41234371U,
      317738113U,
      2744600205U,
      3338261355U,
      3881799427U,
      2510066197U,
      3950669247U,
      3663286933U,
      763608788U,
      3542185048U,
      694804553U,
      1154009486U,
      1787413109U,
      2021232372U,
      1799248025U,
      3715217703U,
      3058688446U,
      397248752U,
      1722556617U,
      3023752829U,
      407560035U,
      2184256229U,
      1613975959U,
      1165972322U,
      3765920945U,
      2226023355U,
      480281086U,
      2485848313U,
      1483229296U,
      436028815U,
      2272059028U,
      3086515026U,
      601060267U,
      3791801202U,
      1468997603U,
      715871590U,
      120122290U,
      63092015U,
      2591802758U,
      2768779219U,
      4068943920U,
      2997206819U,
      3127509762U,
      1552029421U,
      723308426U,
      2461301159U,
      4042393587U,
      2715969870U,
      3455375973U,
      3586000134U,
      526529745U,
      2331944644U,
      2639474228U,
      2689987490U,
      853641733U,
      1978398372U,
      971801355U,
      2867814464U,
      111112542U,
      1360031421U,
      4186579262U,
      1023860118U,
      2919579357U,
      1186850381U,
      3045938321U,
      90031217U,
      1876166148U,
      4279586912U,
      620468249U,
      2548678102U,
      3426959497U,
      2006899047U,
      3175278768U,
      2290845959U,
      945494503U,
      3689859193U,
      1191869601U,
      3910091388U,
      3374220536U,
      0U,
      2206629897U,
      1223502642U,
      2893025566U,
      1316117100U,
      4227796733U,
      1446544655U,
      517320253U,
      658058550U,
      1691946762U,
      564550760U,
      3511966619U,
      976107044U,
      2976320012U,
      266819475U,
      3533106868U,
      2660342555U,
      1338359936U,
      2720062561U,
      1766553434U,
      370807324U,
      179999714U,
      3844776128U,
      1138762300U,
      488053522U,
      185403662U,
      2915535858U,
      3114841645U,
      3366526484U,
      2233069911U,
      1275557295U,
      3151862254U,
      4250959779U,
      2670068215U,
      3170202204U,
      3309004356U,
      880737115U,
      1982415755U,
      3703972811U,
      1761406390U,
      1676797112U,
      3403428311U,
      277177154U,
      1076008723U,
      538035844U,
      2099530373U,
      4164795346U,
      288553390U,
      1839278535U,
      1261411869U,
      4080055004U,
      3964831245U,
      3504587127U,
      1813426987U,
      2579067049U,
      4199060497U,
      577038663U,
      3297574056U,
      440397984U,
      3626794326U,
      4019204898U,
      3343796615U,
      3251714265U,
      4272081548U,
      906744984U,
      3481400742U,
      685669029U,
      646887386U,
      2764025151U,
      3835509292U,
      227702864U,
      2613862250U,
      1648787028U,
      3256061430U,
      3904428176U,
      1593260334U,
      4121936770U,
      3196083615U,
      2090061929U,
      2838353263U,
      3004310991U,
      999926984U,
      2809993232U,
      1852021992U,
      2075868123U,
      158869197U,
      4095236462U,
      28809964U,
      2828685187U,
      1701746150U,
      2129067946U,
      147831841U,
      3873969647U,
      3650873274U,
      3459673930U,
      3557400554U,
      3598495785U,
      2947720241U,
      824393514U,
      815048134U,
      3227951669U,
      935087732U,
      2798289660U,
      2966458592U,
      366520115U,
      1251476721U,
      4158319681U,
      240176511U,
      804688151U,
      2379631990U,
      1303441219U,
      1414376140U,
      3741619940U,
      3820343710U,
      461924940U,
      3089050817U,
      2136040774U,
      82468509U,
      1563790337U,
      1937016826U,
      776014843U,
      1511876531U,
      1389550482U,
      861278441U,
      323475053U,
      2355222426U,
      2047648055U,
      2383738969U,
      2302415851U,
      3995576782U,
      902390199U,
      3991215329U,
      1018251130U,
      1507840668U,
      1064563285U,
      2043548696U,
      3208103795U,
      3939366739U,
      1537932639U,
      342834655U,
      2262516856U,
      2180231114U,
      1053059257U,
      741614648U,
      1598071746U,
      1925389590U,
      203809468U,
      2336832552U,
      1100287487U,
      1895934009U,
      3736275976U,
      2632234200U,
      2428589668U,
      1636092795U,
      1890988757U,
      1952214088U,
      1113045200U
        };
        private static readonly uint[] Tinv1 = new uint[256]
        {
      2817806672U,
      1698790995U,
      2752977603U,
      1579629206U,
      1806384075U,
      1167925233U,
      1492823211U,
      65227667U,
      4197458005U,
      1836494326U,
      1993115793U,
      1275262245U,
      3622129660U,
      3408578007U,
      1144333952U,
      2741155215U,
      1521606217U,
      465184103U,
      250234264U,
      3237895649U,
      1966064386U,
      4031545618U,
      2537983395U,
      4191382470U,
      1603208167U,
      2626819477U,
      2054012907U,
      1498584538U,
      2210321453U,
      561273043U,
      1776306473U,
      3368652356U,
      2311222634U,
      2039411832U,
      1045993835U,
      1907959773U,
      1340194486U,
      2911432727U,
      2887829862U,
      986611124U,
      1256153880U,
      823846274U,
      860985184U,
      2136171077U,
      2003087840U,
      2926295940U,
      2692873756U,
      722008468U,
      1749577816U,
      4249194265U,
      1826526343U,
      4168831671U,
      3547573027U,
      38499042U,
      2401231703U,
      2874500650U,
      686535175U,
      3266653955U,
      2076542618U,
      137876389U,
      2267558130U,
      2780767154U,
      1778582202U,
      2182540636U,
      483363371U,
      3027871634U,
      4060607472U,
      3798552225U,
      4107953613U,
      3188000469U,
      1647628575U,
      4272342154U,
      1395537053U,
      1442030240U,
      3783918898U,
      3958809717U,
      3968011065U,
      4016062634U,
      2675006982U,
      275692881U,
      2317434617U,
      115185213U,
      88006062U,
      3185986886U,
      2371129781U,
      1573155077U,
      3557164143U,
      357589247U,
      4221049124U,
      3921532567U,
      1128303052U,
      2665047927U,
      1122545853U,
      2341013384U,
      1528424248U,
      4006115803U,
      175939911U,
      256015593U,
      512030921U,
      0U,
      2256537987U,
      3979031112U,
      1880170156U,
      1918528590U,
      4279172603U,
      948244310U,
      3584965918U,
      959264295U,
      3641641572U,
      2791073825U,
      1415289809U,
      775300154U,
      1728711857U,
      3881276175U,
      2532226258U,
      2442861470U,
      3317727311U,
      551313826U,
      1266113129U,
      437394454U,
      3130253834U,
      715178213U,
      3760340035U,
      387650077U,
      218697227U,
      3347837613U,
      2830511545U,
      2837320904U,
      435246981U,
      125153100U,
      3717852859U,
      1618977789U,
      637663135U,
      4117912764U,
      996558021U,
      2130402100U,
      692292470U,
      3324234716U,
      4243437160U,
      4058298467U,
      3694254026U,
      2237874704U,
      580326208U,
      298222624U,
      608863613U,
      1035719416U,
      855223825U,
      2703869805U,
      798891339U,
      817028339U,
      1384517100U,
      3821107152U,
      380840812U,
      3111168409U,
      1217663482U,
      1693009698U,
      2365368516U,
      1072734234U,
      746411736U,
      2419270383U,
      1313441735U,
      3510163905U,
      2731183358U,
      198481974U,
      2180359887U,
      3732579624U,
      2394413606U,
      3215802276U,
      2637835492U,
      2457358349U,
      3428805275U,
      1182684258U,
      328070850U,
      3101200616U,
      4147719774U,
      2948825845U,
      2153619390U,
      2479909244U,
      768962473U,
      304467891U,
      2578237499U,
      2098729127U,
      1671227502U,
      3141262203U,
      2015808777U,
      408514292U,
      3080383489U,
      2588902312U,
      1855317605U,
      3875515006U,
      3485212936U,
      3893751782U,
      2615655129U,
      913263310U,
      161475284U,
      2091919830U,
      2997105071U,
      591342129U,
      2493892144U,
      1721906624U,
      3159258167U,
      3397581990U,
      3499155632U,
      3634836245U,
      2550460746U,
      3672916471U,
      1355644686U,
      4136703791U,
      3595400845U,
      2968470349U,
      1303039060U,
      76997855U,
      3050413795U,
      2288667675U,
      523026872U,
      1365591679U,
      3932069124U,
      898367837U,
      1955068531U,
      1091304238U,
      493335386U,
      3537605202U,
      1443948851U,
      1205234963U,
      1641519756U,
      211892090U,
      351820174U,
      1007938441U,
      665439982U,
      3378624309U,
      3843875309U,
      2974251580U,
      3755121753U,
      1945261375U,
      3457423481U,
      935818175U,
      3455538154U,
      2868731739U,
      1866325780U,
      3678697606U,
      4088384129U,
      3295197502U,
      874788908U,
      1084473951U,
      3273463410U,
      635616268U,
      1228679307U,
      2500722497U,
      27801969U,
      3003910366U,
      3837057180U,
      3243664528U,
      2227927905U,
      3056784752U,
      1550600308U,
      1471729730U
        };
        private static readonly uint[] Tinv2 = new uint[256]
        {
      4098969767U,
      1098797925U,
      387629988U,
      658151006U,
      2872822635U,
      2636116293U,
      4205620056U,
      3813380867U,
      807425530U,
      1991112301U,
      3431502198U,
      49620300U,
      3847224535U,
      717608907U,
      891715652U,
      1656065955U,
      2984135002U,
      3123013403U,
      3930429454U,
      4267565504U,
      801309301U,
      1283527408U,
      1183687575U,
      3547055865U,
      2399397727U,
      2450888092U,
      1841294202U,
      1385552473U,
      3201576323U,
      1951978273U,
      3762891113U,
      3381544136U,
      3262474889U,
      2398386297U,
      1486449470U,
      3106397553U,
      3787372111U,
      2297436077U,
      550069932U,
      3464344634U,
      3747813450U,
      451248689U,
      1368875059U,
      1398949247U,
      1689378935U,
      1807451310U,
      2180914336U,
      150574123U,
      1215322216U,
      1167006205U,
      3734275948U,
      2069018616U,
      1940595667U,
      1265820162U,
      534992783U,
      1432758955U,
      3954313000U,
      3039757250U,
      3313932923U,
      936617224U,
      674296455U,
      3206787749U,
      50510442U,
      384654466U,
      3481938716U,
      2041025204U,
      133427442U,
      1766760930U,
      3664104948U,
      84334014U,
      886120290U,
      2797898494U,
      775200083U,
      4087521365U,
      2315596513U,
      4137973227U,
      2198551020U,
      1614850799U,
      1901987487U,
      1857900816U,
      557775242U,
      3717610758U,
      1054715397U,
      3863824061U,
      1418835341U,
      3295741277U,
      100954068U,
      1348534037U,
      2551784699U,
      3184957417U,
      1082772547U,
      3647436702U,
      3903896898U,
      2298972299U,
      434583643U,
      3363429358U,
      2090944266U,
      1115482383U,
      2230896926U,
      0U,
      2148107142U,
      724715757U,
      287222896U,
      1517047410U,
      251526143U,
      2232374840U,
      2923241173U,
      758523705U,
      252339417U,
      1550328230U,
      1536938324U,
      908343854U,
      168604007U,
      1469255655U,
      4004827798U,
      2602278545U,
      3229634501U,
      3697386016U,
      2002413899U,
      303830554U,
      2481064634U,
      2696996138U,
      574374880U,
      454171927U,
      151915277U,
      2347937223U,
      3056449960U,
      504678569U,
      4049044761U,
      1974422535U,
      2582559709U,
      2141453664U,
      33005350U,
      1918680309U,
      1715782971U,
      4217058430U,
      1133213225U,
      600562886U,
      3988154620U,
      3837289457U,
      836225756U,
      1665273989U,
      2534621218U,
      3330547729U,
      1250262308U,
      3151165501U,
      4188934450U,
      700935585U,
      2652719919U,
      3000824624U,
      2249059410U,
      3245854947U,
      3005967382U,
      1890163129U,
      2484206152U,
      3913753188U,
      4238918796U,
      4037024319U,
      2102843436U,
      857927568U,
      1233635150U,
      953795025U,
      3398237858U,
      3566745099U,
      4121350017U,
      2057644254U,
      3084527246U,
      2906629311U,
      976020637U,
      2018512274U,
      1600822220U,
      2119459398U,
      2381758995U,
      3633375416U,
      959340279U,
      3280139695U,
      1570750080U,
      3496574099U,
      3580864813U,
      634368786U,
      2898803609U,
      403744637U,
      2632478307U,
      1004239803U,
      650971512U,
      1500443672U,
      2599158199U,
      1334028442U,
      2514904430U,
      4289363686U,
      3156281551U,
      368043752U,
      3887782299U,
      1867173430U,
      2682967049U,
      2955531900U,
      2754719666U,
      1059729699U,
      2781229204U,
      2721431654U,
      1316239292U,
      2197595850U,
      2430644432U,
      2805143000U,
      82922136U,
      3963746266U,
      3447656016U,
      2434215926U,
      1299615190U,
      4014165424U,
      2865517645U,
      2531581700U,
      3516851125U,
      1783372680U,
      750893087U,
      1699118929U,
      1587348714U,
      2348899637U,
      2281337716U,
      201010753U,
      1739807261U,
      3683799762U,
      283718486U,
      3597472583U,
      3617229921U,
      2704767500U,
      4166618644U,
      334203196U,
      2848910887U,
      1639396809U,
      484568549U,
      1199193265U,
      3533461983U,
      4065673075U,
      337148366U,
      3346251575U,
      4149471949U,
      4250885034U,
      1038029935U,
      1148749531U,
      2949284339U,
      1756970692U,
      607661108U,
      2747424576U,
      488010435U,
      3803974693U,
      1009290057U,
      234832277U,
      2822336769U,
      201907891U,
      3034094820U,
      1449431233U,
      3413860740U,
      852848822U,
      1816687708U,
      3100656215U
        };
        private static readonly uint[] Tinv3 = new uint[256]
        {
      1364240372U,
      2119394625U,
      449029143U,
      982933031U,
      1003187115U,
      535905693U,
      2896910586U,
      1267925987U,
      542505520U,
      2918608246U,
      2291234508U,
      4112862210U,
      1341970405U,
      3319253802U,
      645940277U,
      3046089570U,
      3729349297U,
      627514298U,
      1167593194U,
      1575076094U,
      3271718191U,
      2165502028U,
      2376308550U,
      1808202195U,
      65494927U,
      362126482U,
      3219880557U,
      2514114898U,
      3559752638U,
      1490231668U,
      1227450848U,
      2386872521U,
      1969916354U,
      4101536142U,
      2573942360U,
      668823993U,
      3199619041U,
      4028083592U,
      3378949152U,
      2108963534U,
      1662536415U,
      3850514714U,
      2539664209U,
      1648721747U,
      2984277860U,
      3146034795U,
      4263288961U,
      4187237128U,
      1884842056U,
      2400845125U,
      2491903198U,
      1387788411U,
      2871251827U,
      1927414347U,
      3814166303U,
      1714072405U,
      2986813675U,
      788775605U,
      2258271173U,
      3550808119U,
      821200680U,
      598910399U,
      45771267U,
      3982262806U,
      2318081231U,
      2811409529U,
      4092654087U,
      1319232105U,
      1707996378U,
      114671109U,
      3508494900U,
      3297443494U,
      882725678U,
      2728416755U,
      87220618U,
      2759191542U,
      188345475U,
      1084944224U,
      1577492337U,
      3176206446U,
      1056541217U,
      2520581853U,
      3719169342U,
      1296481766U,
      2444594516U,
      1896177092U,
      74437638U,
      1627329872U,
      421854104U,
      3600279997U,
      2311865152U,
      1735892697U,
      2965193448U,
      126389129U,
      3879230233U,
      2044456648U,
      2705787516U,
      2095648578U,
      4173930116U,
      0U,
      159614592U,
      843640107U,
      514617361U,
      1817080410U,
      4261150478U,
      257308805U,
      1025430958U,
      908540205U,
      174381327U,
      1747035740U,
      2614187099U,
      607792694U,
      212952842U,
      2467293015U,
      3033700078U,
      463376795U,
      2152711616U,
      1638015196U,
      1516850039U,
      471210514U,
      3792353939U,
      3236244128U,
      1011081250U,
      303896347U,
      235605257U,
      4071475083U,
      767142070U,
      348694814U,
      1468340721U,
      2940995445U,
      4005289369U,
      2751291519U,
      4154402305U,
      1555887474U,
      1153776486U,
      1530167035U,
      2339776835U,
      3420243491U,
      3060333805U,
      3093557732U,
      3620396081U,
      1108378979U,
      322970263U,
      2216694214U,
      2239571018U,
      3539484091U,
      2920362745U,
      3345850665U,
      491466654U,
      3706925234U,
      233591430U,
      2010178497U,
      728503987U,
      2845423984U,
      301615252U,
      1193436393U,
      2831453436U,
      2686074864U,
      1457007741U,
      586125363U,
      2277985865U,
      3653357880U,
      2365498058U,
      2553678804U,
      2798617077U,
      2770919034U,
      3659959991U,
      1067761581U,
      753179962U,
      1343066744U,
      1788595295U,
      1415726718U,
      4139914125U,
      2431170776U,
      777975609U,
      2197139395U,
      2680062045U,
      1769771984U,
      1873358293U,
      3484619301U,
      3359349164U,
      279411992U,
      3899548572U,
      3682319163U,
      3439949862U,
      1861490777U,
      3959535514U,
      2208864847U,
      3865407125U,
      2860443391U,
      554225596U,
      4024887317U,
      3134823399U,
      1255028335U,
      3939764639U,
      701922480U,
      833598116U,
      707863359U,
      3325072549U,
      901801634U,
      1949809742U,
      4238789250U,
      3769684112U,
      857069735U,
      4048197636U,
      1106762476U,
      2131644621U,
      389019281U,
      1989006925U,
      1129165039U,
      3428076970U,
      3839820950U,
      2665723345U,
      1276872810U,
      3250069292U,
      1182749029U,
      2634345054U,
      22885772U,
      4201870471U,
      4214112523U,
      3009027431U,
      2454901467U,
      3912455696U,
      1829980118U,
      2592891351U,
      930745505U,
      1502483704U,
      3951639571U,
      3471714217U,
      3073755489U,
      3790464284U,
      2050797895U,
      2623135698U,
      1430221810U,
      410635796U,
      1941911495U,
      1407897079U,
      1599843069U,
      3742658365U,
      2022103876U,
      3397514159U,
      3107898472U,
      942421028U,
      3261022371U,
      376619805U,
      3154912738U,
      680216892U,
      4282488077U,
      963707304U,
      148812556U,
      3634160820U,
      1687208278U,
      2069988555U,
      3580933682U,
      1215585388U,
      3494008760U
        };
        private int ROUNDS;
        private uint[][] WorkingKey;
        private uint C0;
        private uint C1;
        private uint C2;
        private uint C3;
        private bool forEncryption;

        private static uint Shift( uint r, int shift ) => (r >> shift) | (r << (32 - shift));

        private static uint FFmulX( uint x ) => (uint)((((int)x & 2139062143) << 1) ^ ((int)((x & 2155905152U) >> 7) * 27));

        private static uint FFmulX2( uint x )
        {
            uint num1 = (uint)(((int)x & 1061109567) << 2);
            uint num2 = x & 3233857728U;
            uint num3 = num2 ^ (num2 >> 1);
            return num1 ^ (num3 >> 2) ^ (num3 >> 5);
        }

        private static uint Inv_Mcol( uint x )
        {
            uint r1 = x;
            uint x1 = r1 ^ Shift( r1, 8 );
            uint x2 = r1 ^ FFmulX( x1 );
            uint r2 = x1 ^ FFmulX2( x2 );
            return x2 ^ r2 ^ Shift( r2, 16 );
        }

        private static uint SubWord( uint x ) => (uint)(S[(int)(IntPtr)(x & byte.MaxValue)] | (S[(int)(IntPtr)((x >> 8) & byte.MaxValue)] << 8) | (S[(int)(IntPtr)((x >> 16) & byte.MaxValue)] << 16) | (S[(int)(IntPtr)((x >> 24) & byte.MaxValue)] << 24));

        private uint[][] GenerateWorkingKey( byte[] key, bool forEncryption )
        {
            int length = key.Length;
            if (length < 16 || length > 32 || (length & 7) != 0)
                throw new ArgumentException( "Key length not 128/192/256 bits." );
            int num1 = length >> 2;
            this.ROUNDS = num1 + 6;
            uint[][] workingKey = new uint[this.ROUNDS + 1][];
            for (int index = 0; index <= this.ROUNDS; ++index)
                workingKey[index] = new uint[4];
            switch (num1)
            {
                case 4:
                    uint uint32_1 = Pack.LE_To_UInt32( key, 0 );
                    workingKey[0][0] = uint32_1;
                    uint uint32_2 = Pack.LE_To_UInt32( key, 4 );
                    workingKey[0][1] = uint32_2;
                    uint uint32_3 = Pack.LE_To_UInt32( key, 8 );
                    workingKey[0][2] = uint32_3;
                    uint uint32_4 = Pack.LE_To_UInt32( key, 12 );
                    workingKey[0][3] = uint32_4;
                    for (int index = 1; index <= 10; ++index)
                    {
                        uint num2 = SubWord( Shift( uint32_4, 8 ) ) ^ rcon[index - 1];
                        uint32_1 ^= num2;
                        workingKey[index][0] = uint32_1;
                        uint32_2 ^= uint32_1;
                        workingKey[index][1] = uint32_2;
                        uint32_3 ^= uint32_2;
                        workingKey[index][2] = uint32_3;
                        uint32_4 ^= uint32_3;
                        workingKey[index][3] = uint32_4;
                    }
                    break;
                case 6:
                    uint uint32_5 = Pack.LE_To_UInt32( key, 0 );
                    workingKey[0][0] = uint32_5;
                    uint uint32_6 = Pack.LE_To_UInt32( key, 4 );
                    workingKey[0][1] = uint32_6;
                    uint uint32_7 = Pack.LE_To_UInt32( key, 8 );
                    workingKey[0][2] = uint32_7;
                    uint uint32_8 = Pack.LE_To_UInt32( key, 12 );
                    workingKey[0][3] = uint32_8;
                    uint uint32_9 = Pack.LE_To_UInt32( key, 16 );
                    workingKey[1][0] = uint32_9;
                    uint uint32_10 = Pack.LE_To_UInt32( key, 20 );
                    workingKey[1][1] = uint32_10;
                    uint num3 = 1;
                    uint num4 = SubWord( Shift( uint32_10, 8 ) ) ^ num3;
                    uint num5 = num3 << 1;
                    uint num6 = uint32_5 ^ num4;
                    workingKey[1][2] = num6;
                    uint num7 = uint32_6 ^ num6;
                    workingKey[1][3] = num7;
                    uint num8 = uint32_7 ^ num7;
                    workingKey[2][0] = num8;
                    uint num9 = uint32_8 ^ num8;
                    workingKey[2][1] = num9;
                    uint num10 = uint32_9 ^ num9;
                    workingKey[2][2] = num10;
                    uint r1 = uint32_10 ^ num10;
                    workingKey[2][3] = r1;
                    for (int index = 3; index < 12; index += 3)
                    {
                        uint num11 = SubWord( Shift( r1, 8 ) ) ^ num5;
                        uint num12 = num5 << 1;
                        uint num13 = num6 ^ num11;
                        workingKey[index][0] = num13;
                        uint num14 = num7 ^ num13;
                        workingKey[index][1] = num14;
                        uint num15 = num8 ^ num14;
                        workingKey[index][2] = num15;
                        uint num16 = num9 ^ num15;
                        workingKey[index][3] = num16;
                        uint num17 = num10 ^ num16;
                        workingKey[index + 1][0] = num17;
                        uint r2 = r1 ^ num17;
                        workingKey[index + 1][1] = r2;
                        uint num18 = SubWord( Shift( r2, 8 ) ) ^ num12;
                        num5 = num12 << 1;
                        num6 = num13 ^ num18;
                        workingKey[index + 1][2] = num6;
                        num7 = num14 ^ num6;
                        workingKey[index + 1][3] = num7;
                        num8 = num15 ^ num7;
                        workingKey[index + 2][0] = num8;
                        num9 = num16 ^ num8;
                        workingKey[index + 2][1] = num9;
                        num10 = num17 ^ num9;
                        workingKey[index + 2][2] = num10;
                        r1 = r2 ^ num10;
                        workingKey[index + 2][3] = r1;
                    }
                    uint num19 = SubWord( Shift( r1, 8 ) ) ^ num5;
                    uint num20 = num6 ^ num19;
                    workingKey[12][0] = num20;
                    uint num21 = num7 ^ num20;
                    workingKey[12][1] = num21;
                    uint num22 = num8 ^ num21;
                    workingKey[12][2] = num22;
                    uint num23 = num9 ^ num22;
                    workingKey[12][3] = num23;
                    break;
                case 8:
                    uint uint32_11 = Pack.LE_To_UInt32( key, 0 );
                    workingKey[0][0] = uint32_11;
                    uint uint32_12 = Pack.LE_To_UInt32( key, 4 );
                    workingKey[0][1] = uint32_12;
                    uint uint32_13 = Pack.LE_To_UInt32( key, 8 );
                    workingKey[0][2] = uint32_13;
                    uint uint32_14 = Pack.LE_To_UInt32( key, 12 );
                    workingKey[0][3] = uint32_14;
                    uint uint32_15 = Pack.LE_To_UInt32( key, 16 );
                    workingKey[1][0] = uint32_15;
                    uint uint32_16 = Pack.LE_To_UInt32( key, 20 );
                    workingKey[1][1] = uint32_16;
                    uint uint32_17 = Pack.LE_To_UInt32( key, 24 );
                    workingKey[1][2] = uint32_17;
                    uint uint32_18 = Pack.LE_To_UInt32( key, 28 );
                    workingKey[1][3] = uint32_18;
                    uint num24 = 1;
                    for (int index = 2; index < 14; index += 2)
                    {
                        uint num25 = SubWord( Shift( uint32_18, 8 ) ) ^ num24;
                        num24 <<= 1;
                        uint32_11 ^= num25;
                        workingKey[index][0] = uint32_11;
                        uint32_12 ^= uint32_11;
                        workingKey[index][1] = uint32_12;
                        uint32_13 ^= uint32_12;
                        workingKey[index][2] = uint32_13;
                        uint32_14 ^= uint32_13;
                        workingKey[index][3] = uint32_14;
                        uint num26 = SubWord( uint32_14 );
                        uint32_15 ^= num26;
                        workingKey[index + 1][0] = uint32_15;
                        uint32_16 ^= uint32_15;
                        workingKey[index + 1][1] = uint32_16;
                        uint32_17 ^= uint32_16;
                        workingKey[index + 1][2] = uint32_17;
                        uint32_18 ^= uint32_17;
                        workingKey[index + 1][3] = uint32_18;
                    }
                    uint num27 = SubWord( Shift( uint32_18, 8 ) ) ^ num24;
                    uint num28 = uint32_11 ^ num27;
                    workingKey[14][0] = num28;
                    uint num29 = uint32_12 ^ num28;
                    workingKey[14][1] = num29;
                    uint num30 = uint32_13 ^ num29;
                    workingKey[14][2] = num30;
                    uint num31 = uint32_14 ^ num30;
                    workingKey[14][3] = num31;
                    break;
                default:
                    throw new InvalidOperationException( "Should never get here" );
            }
            if (!forEncryption)
            {
                for (int index1 = 1; index1 < this.ROUNDS; ++index1)
                {
                    uint[] numArray = workingKey[index1];
                    for (int index2 = 0; index2 < 4; ++index2)
                        numArray[index2] = Inv_Mcol( numArray[index2] );
                }
            }
            return workingKey;
        }

        public virtual void Init( bool forEncryption, ICipherParameters parameters )
        {
            this.WorkingKey = parameters is KeyParameter keyParameter ? this.GenerateWorkingKey( keyParameter.GetKey(), forEncryption ) : throw new ArgumentException( "invalid parameter passed to AES init - " + Platform.GetTypeName( parameters ) );
            this.forEncryption = forEncryption;
        }

        public virtual string AlgorithmName => "AES";

        public virtual bool IsPartialBlockOkay => false;

        public virtual int GetBlockSize() => 16;

        public virtual int ProcessBlock( byte[] input, int inOff, byte[] output, int outOff )
        {
            if (this.WorkingKey == null)
                throw new InvalidOperationException( "AES engine not initialised" );
            Check.DataLength( input, inOff, 16, "input buffer too short" );
            Check.OutputLength( output, outOff, 16, "output buffer too short" );
            this.UnPackBlock( input, inOff );
            if (this.forEncryption)
                this.EncryptBlock( this.WorkingKey );
            else
                this.DecryptBlock( this.WorkingKey );
            this.PackBlock( output, outOff );
            return 16;
        }

        public virtual void Reset()
        {
        }

        private void UnPackBlock( byte[] bytes, int off )
        {
            this.C0 = Pack.LE_To_UInt32( bytes, off );
            this.C1 = Pack.LE_To_UInt32( bytes, off + 4 );
            this.C2 = Pack.LE_To_UInt32( bytes, off + 8 );
            this.C3 = Pack.LE_To_UInt32( bytes, off + 12 );
        }

        private void PackBlock( byte[] bytes, int off )
        {
            Pack.UInt32_To_LE( this.C0, bytes, off );
            Pack.UInt32_To_LE( this.C1, bytes, off + 4 );
            Pack.UInt32_To_LE( this.C2, bytes, off + 8 );
            Pack.UInt32_To_LE( this.C3, bytes, off + 12 );
        }

        private void EncryptBlock( uint[][] KW )
        {
            uint[] numArray1 = KW[0];
            uint num1 = this.C0 ^ numArray1[0];
            uint num2 = this.C1 ^ numArray1[1];
            uint num3 = this.C2 ^ numArray1[2];
            uint num4 = this.C3 ^ numArray1[3];
            int num5 = 1;
            while (num5 < this.ROUNDS - 1)
            {
                uint[][] numArray2 = KW;
                int index1 = num5;
                int num6 = index1 + 1;
                uint[] numArray3 = numArray2[index1];
                uint num7 = T0[(int)(IntPtr)(num1 & byte.MaxValue)] ^ T1[(int)(IntPtr)((num2 >> 8) & byte.MaxValue)] ^ T2[(int)(IntPtr)((num3 >> 16) & byte.MaxValue)] ^ T3[(int)(IntPtr)(num4 >> 24)] ^ numArray3[0];
                uint num8 = T0[(int)(IntPtr)(num2 & byte.MaxValue)] ^ T1[(int)(IntPtr)((num3 >> 8) & byte.MaxValue)] ^ T2[(int)(IntPtr)((num4 >> 16) & byte.MaxValue)] ^ T3[(int)(IntPtr)(num1 >> 24)] ^ numArray3[1];
                uint num9 = T0[(int)(IntPtr)(num3 & byte.MaxValue)] ^ T1[(int)(IntPtr)((num4 >> 8) & byte.MaxValue)] ^ T2[(int)(IntPtr)((num1 >> 16) & byte.MaxValue)] ^ T3[(int)(IntPtr)(num2 >> 24)] ^ numArray3[2];
                uint num10 = T0[(int)(IntPtr)(num4 & byte.MaxValue)] ^ T1[(int)(IntPtr)((num1 >> 8) & byte.MaxValue)] ^ T2[(int)(IntPtr)((num2 >> 16) & byte.MaxValue)] ^ T3[(int)(IntPtr)(num3 >> 24)] ^ numArray3[3];
                uint[][] numArray4 = KW;
                int index2 = num6;
                num5 = index2 + 1;
                uint[] numArray5 = numArray4[index2];
                num1 = T0[(int)(IntPtr)(num7 & byte.MaxValue)] ^ T1[(int)(IntPtr)((num8 >> 8) & byte.MaxValue)] ^ T2[(int)(IntPtr)((num9 >> 16) & byte.MaxValue)] ^ T3[(int)(IntPtr)(num10 >> 24)] ^ numArray5[0];
                num2 = T0[(int)(IntPtr)(num8 & byte.MaxValue)] ^ T1[(int)(IntPtr)((num9 >> 8) & byte.MaxValue)] ^ T2[(int)(IntPtr)((num10 >> 16) & byte.MaxValue)] ^ T3[(int)(IntPtr)(num7 >> 24)] ^ numArray5[1];
                num3 = T0[(int)(IntPtr)(num9 & byte.MaxValue)] ^ T1[(int)(IntPtr)((num10 >> 8) & byte.MaxValue)] ^ T2[(int)(IntPtr)((num7 >> 16) & byte.MaxValue)] ^ T3[(int)(IntPtr)(num8 >> 24)] ^ numArray5[2];
                num4 = T0[(int)(IntPtr)(num10 & byte.MaxValue)] ^ T1[(int)(IntPtr)((num7 >> 8) & byte.MaxValue)] ^ T2[(int)(IntPtr)((num8 >> 16) & byte.MaxValue)] ^ T3[(int)(IntPtr)(num9 >> 24)] ^ numArray5[3];
            }
            uint[][] numArray6 = KW;
            int index3 = num5;
            int index4 = index3 + 1;
            uint[] numArray7 = numArray6[index3];
            uint num11 = T0[(int)(IntPtr)(num1 & byte.MaxValue)] ^ T1[(int)(IntPtr)((num2 >> 8) & byte.MaxValue)] ^ T2[(int)(IntPtr)((num3 >> 16) & byte.MaxValue)] ^ T3[(int)(IntPtr)(num4 >> 24)] ^ numArray7[0];
            uint num12 = T0[(int)(IntPtr)(num2 & byte.MaxValue)] ^ T1[(int)(IntPtr)((num3 >> 8) & byte.MaxValue)] ^ T2[(int)(IntPtr)((num4 >> 16) & byte.MaxValue)] ^ T3[(int)(IntPtr)(num1 >> 24)] ^ numArray7[1];
            uint num13 = T0[(int)(IntPtr)(num3 & byte.MaxValue)] ^ T1[(int)(IntPtr)((num4 >> 8) & byte.MaxValue)] ^ T2[(int)(IntPtr)((num1 >> 16) & byte.MaxValue)] ^ T3[(int)(IntPtr)(num2 >> 24)] ^ numArray7[2];
            uint num14 = T0[(int)(IntPtr)(num4 & byte.MaxValue)] ^ T1[(int)(IntPtr)((num1 >> 8) & byte.MaxValue)] ^ T2[(int)(IntPtr)((num2 >> 16) & byte.MaxValue)] ^ T3[(int)(IntPtr)(num3 >> 24)] ^ numArray7[3];
            uint[] numArray8 = KW[index4];
            this.C0 = (uint)(S[(int)(IntPtr)(num11 & byte.MaxValue)] ^ (S[(int)(IntPtr)((num12 >> 8) & byte.MaxValue)] << 8) ^ (S[(int)(IntPtr)((num13 >> 16) & byte.MaxValue)] << 16) ^ (S[(int)(IntPtr)(num14 >> 24)] << 24)) ^ numArray8[0];
            this.C1 = (uint)(S[(int)(IntPtr)(num12 & byte.MaxValue)] ^ (S[(int)(IntPtr)((num13 >> 8) & byte.MaxValue)] << 8) ^ (S[(int)(IntPtr)((num14 >> 16) & byte.MaxValue)] << 16) ^ (S[(int)(IntPtr)(num11 >> 24)] << 24)) ^ numArray8[1];
            this.C2 = (uint)(S[(int)(IntPtr)(num13 & byte.MaxValue)] ^ (S[(int)(IntPtr)((num14 >> 8) & byte.MaxValue)] << 8) ^ (S[(int)(IntPtr)((num11 >> 16) & byte.MaxValue)] << 16) ^ (S[(int)(IntPtr)(num12 >> 24)] << 24)) ^ numArray8[2];
            this.C3 = (uint)(S[(int)(IntPtr)(num14 & byte.MaxValue)] ^ (S[(int)(IntPtr)((num11 >> 8) & byte.MaxValue)] << 8) ^ (S[(int)(IntPtr)((num12 >> 16) & byte.MaxValue)] << 16) ^ (S[(int)(IntPtr)(num13 >> 24)] << 24)) ^ numArray8[3];
        }

        private void DecryptBlock( uint[][] KW )
        {
            uint[] numArray1 = KW[this.ROUNDS];
            uint num1 = this.C0 ^ numArray1[0];
            uint num2 = this.C1 ^ numArray1[1];
            uint num3 = this.C2 ^ numArray1[2];
            uint num4 = this.C3 ^ numArray1[3];
            int num5 = this.ROUNDS - 1;
            while (num5 > 1)
            {
                uint[][] numArray2 = KW;
                int index1 = num5;
                int num6 = index1 - 1;
                uint[] numArray3 = numArray2[index1];
                uint num7 = Tinv0[(int)(IntPtr)(num1 & byte.MaxValue)] ^ Tinv1[(int)(IntPtr)((num4 >> 8) & byte.MaxValue)] ^ Tinv2[(int)(IntPtr)((num3 >> 16) & byte.MaxValue)] ^ Tinv3[(int)(IntPtr)(num2 >> 24)] ^ numArray3[0];
                uint num8 = Tinv0[(int)(IntPtr)(num2 & byte.MaxValue)] ^ Tinv1[(int)(IntPtr)((num1 >> 8) & byte.MaxValue)] ^ Tinv2[(int)(IntPtr)((num4 >> 16) & byte.MaxValue)] ^ Tinv3[(int)(IntPtr)(num3 >> 24)] ^ numArray3[1];
                uint num9 = Tinv0[(int)(IntPtr)(num3 & byte.MaxValue)] ^ Tinv1[(int)(IntPtr)((num2 >> 8) & byte.MaxValue)] ^ Tinv2[(int)(IntPtr)((num1 >> 16) & byte.MaxValue)] ^ Tinv3[(int)(IntPtr)(num4 >> 24)] ^ numArray3[2];
                uint num10 = Tinv0[(int)(IntPtr)(num4 & byte.MaxValue)] ^ Tinv1[(int)(IntPtr)((num3 >> 8) & byte.MaxValue)] ^ Tinv2[(int)(IntPtr)((num2 >> 16) & byte.MaxValue)] ^ Tinv3[(int)(IntPtr)(num1 >> 24)] ^ numArray3[3];
                uint[][] numArray4 = KW;
                int index2 = num6;
                num5 = index2 - 1;
                uint[] numArray5 = numArray4[index2];
                num1 = Tinv0[(int)(IntPtr)(num7 & byte.MaxValue)] ^ Tinv1[(int)(IntPtr)((num10 >> 8) & byte.MaxValue)] ^ Tinv2[(int)(IntPtr)((num9 >> 16) & byte.MaxValue)] ^ Tinv3[(int)(IntPtr)(num8 >> 24)] ^ numArray5[0];
                num2 = Tinv0[(int)(IntPtr)(num8 & byte.MaxValue)] ^ Tinv1[(int)(IntPtr)((num7 >> 8) & byte.MaxValue)] ^ Tinv2[(int)(IntPtr)((num10 >> 16) & byte.MaxValue)] ^ Tinv3[(int)(IntPtr)(num9 >> 24)] ^ numArray5[1];
                num3 = Tinv0[(int)(IntPtr)(num9 & byte.MaxValue)] ^ Tinv1[(int)(IntPtr)((num8 >> 8) & byte.MaxValue)] ^ Tinv2[(int)(IntPtr)((num7 >> 16) & byte.MaxValue)] ^ Tinv3[(int)(IntPtr)(num10 >> 24)] ^ numArray5[2];
                num4 = Tinv0[(int)(IntPtr)(num10 & byte.MaxValue)] ^ Tinv1[(int)(IntPtr)((num9 >> 8) & byte.MaxValue)] ^ Tinv2[(int)(IntPtr)((num8 >> 16) & byte.MaxValue)] ^ Tinv3[(int)(IntPtr)(num7 >> 24)] ^ numArray5[3];
            }
            uint[] numArray6 = KW[1];
            uint num11 = Tinv0[(int)(IntPtr)(num1 & byte.MaxValue)] ^ Tinv1[(int)(IntPtr)((num4 >> 8) & byte.MaxValue)] ^ Tinv2[(int)(IntPtr)((num3 >> 16) & byte.MaxValue)] ^ Tinv3[(int)(IntPtr)(num2 >> 24)] ^ numArray6[0];
            uint num12 = Tinv0[(int)(IntPtr)(num2 & byte.MaxValue)] ^ Tinv1[(int)(IntPtr)((num1 >> 8) & byte.MaxValue)] ^ Tinv2[(int)(IntPtr)((num4 >> 16) & byte.MaxValue)] ^ Tinv3[(int)(IntPtr)(num3 >> 24)] ^ numArray6[1];
            uint num13 = Tinv0[(int)(IntPtr)(num3 & byte.MaxValue)] ^ Tinv1[(int)(IntPtr)((num2 >> 8) & byte.MaxValue)] ^ Tinv2[(int)(IntPtr)((num1 >> 16) & byte.MaxValue)] ^ Tinv3[(int)(IntPtr)(num4 >> 24)] ^ numArray6[2];
            uint num14 = Tinv0[(int)(IntPtr)(num4 & byte.MaxValue)] ^ Tinv1[(int)(IntPtr)((num3 >> 8) & byte.MaxValue)] ^ Tinv2[(int)(IntPtr)((num2 >> 16) & byte.MaxValue)] ^ Tinv3[(int)(IntPtr)(num1 >> 24)] ^ numArray6[3];
            uint[] numArray7 = KW[0];
            this.C0 = (uint)(Si[(int)(IntPtr)(num11 & byte.MaxValue)] ^ (Si[(int)(IntPtr)((num14 >> 8) & byte.MaxValue)] << 8) ^ (Si[(int)(IntPtr)((num13 >> 16) & byte.MaxValue)] << 16) ^ (Si[(int)(IntPtr)(num12 >> 24)] << 24)) ^ numArray7[0];
            this.C1 = (uint)(Si[(int)(IntPtr)(num12 & byte.MaxValue)] ^ (Si[(int)(IntPtr)((num11 >> 8) & byte.MaxValue)] << 8) ^ (Si[(int)(IntPtr)((num14 >> 16) & byte.MaxValue)] << 16) ^ (Si[(int)(IntPtr)(num13 >> 24)] << 24)) ^ numArray7[1];
            this.C2 = (uint)(Si[(int)(IntPtr)(num13 & byte.MaxValue)] ^ (Si[(int)(IntPtr)((num12 >> 8) & byte.MaxValue)] << 8) ^ (Si[(int)(IntPtr)((num11 >> 16) & byte.MaxValue)] << 16) ^ (Si[(int)(IntPtr)(num14 >> 24)] << 24)) ^ numArray7[2];
            this.C3 = (uint)(Si[(int)(IntPtr)(num14 & byte.MaxValue)] ^ (Si[(int)(IntPtr)((num13 >> 8) & byte.MaxValue)] << 8) ^ (Si[(int)(IntPtr)((num12 >> 16) & byte.MaxValue)] << 16) ^ (Si[(int)(IntPtr)(num11 >> 24)] << 24)) ^ numArray7[3];
        }
    }
}
