// Decompiled with JetBrains decompiler
// Type: Org.BouncyCastle.Crypto.Engines.Cast5Engine
// Assembly: BouncyCastle.Crypto, Version=1.8.1.0, Culture=neutral, PublicKeyToken=0e99375e54769942
// MVID: 2C1E8153-B25B-4CDE-9676-EEDAF8A00392
// Assembly location: C:\Users\MÜRVET YÜZDEN ŞEN\Downloads\BouncyCastle.Crypto.dll

using Org.BouncyCastle.Crypto.Parameters;
using Org.BouncyCastle.Crypto.Utilities;
using Org.BouncyCastle.Utilities;

namespace Org.BouncyCastle.Crypto.Engines
{
    public class Cast5Engine : IBlockCipher
    {
        private const int BLOCK_SIZE = 8;
        internal static readonly uint[] S1 = new uint[256]
        {
      821772500U,
      2678128395U,
      1810681135U,
      1059425402U,
      505495343U,
      2617265619U,
      1610868032U,
      3483355465U,
      3218386727U,
      2294005173U,
      3791863952U,
      2563806837U,
      1852023008U,
      365126098U,
      3269944861U,
      584384398U,
      677919599U,
      3229601881U,
      4280515016U,
      2002735330U,
      1136869587U,
      3744433750U,
      2289869850U,
      2731719981U,
      2714362070U,
      879511577U,
      1639411079U,
      575934255U,
      717107937U,
      2857637483U,
      576097850U,
      2731753936U,
      1725645000U,
      2810460463U,
      5111599U,
      767152862U,
      2543075244U,
      1251459544U,
      1383482551U,
      3052681127U,
      3089939183U,
      3612463449U,
      1878520045U,
      1510570527U,
      2189125840U,
      2431448366U,
      582008916U,
      3163445557U,
      1265446783U,
      1354458274U,
      3529918736U,
      3202711853U,
      3073581712U,
      3912963487U,
      3029263377U,
      1275016285U,
      4249207360U,
      2905708351U,
      3304509486U,
      1442611557U,
      3585198765U,
      2712415662U,
      2731849581U,
      3248163920U,
      2283946226U,
      208555832U,
      2766454743U,
      1331405426U,
      1447828783U,
      3315356441U,
      3108627284U,
      2957404670U,
      2981538698U,
      3339933917U,
      1669711173U,
      286233437U,
      1465092821U,
      1782121619U,
      3862771680U,
      710211251U,
      980974943U,
      1651941557U,
      430374111U,
      2051154026U,
      704238805U,
      4128970897U,
      3144820574U,
      2857402727U,
      948965521U,
      3333752299U,
      2227686284U,
      718756367U,
      2269778983U,
      2731643755U,
      718440111U,
      2857816721U,
      3616097120U,
      1113355533U,
      2478022182U,
      410092745U,
      1811985197U,
      1944238868U,
      2696854588U,
      1415722873U,
      1682284203U,
      1060277122U,
      1998114690U,
      1503841958U,
      82706478U,
      2315155686U,
      1068173648U,
      845149890U,
      2167947013U,
      1768146376U,
      1993038550U,
      3566826697U,
      3390574031U,
      940016341U,
      3355073782U,
      2328040721U,
      904371731U,
      1205506512U,
      4094660742U,
      2816623006U,
      825647681U,
      85914773U,
      2857843460U,
      1249926541U,
      1417871568U,
      3287612U,
      3211054559U,
      3126306446U,
      1975924523U,
      1353700161U,
      2814456437U,
      2438597621U,
      1800716203U,
      722146342U,
      2873936343U,
      1151126914U,
      4160483941U,
      2877670899U,
      458611604U,
      2866078500U,
      3483680063U,
      770352098U,
      2652916994U,
      3367839148U,
      3940505011U,
      3585973912U,
      3809620402U,
      718646636U,
      2504206814U,
      2914927912U,
      3631288169U,
      2857486607U,
      2860018678U,
      575749918U,
      2857478043U,
      718488780U,
      2069512688U,
      3548183469U,
      453416197U,
      1106044049U,
      3032691430U,
      52586708U,
      3378514636U,
      3459808877U,
      3211506028U,
      1785789304U,
      218356169U,
      3571399134U,
      3759170522U,
      1194783844U,
      1523787992U,
      3007827094U,
      1975193539U,
      2555452411U,
      1341901877U,
      3045838698U,
      3776907964U,
      3217423946U,
      2802510864U,
      2889438986U,
      1057244207U,
      1636348243U,
      3761863214U,
      1462225785U,
      2632663439U,
      481089165U,
      718503062U,
      24497053U,
      3332243209U,
      3344655856U,
      3655024856U,
      3960371065U,
      1195698900U,
      2971415156U,
      3710176158U,
      2115785917U,
      4027663609U,
      3525578417U,
      2524296189U,
      2745972565U,
      3564906415U,
      1372086093U,
      1452307862U,
      2780501478U,
      1476592880U,
      3389271281U,
      18495466U,
      2378148571U,
      901398090U,
      891748256U,
      3279637769U,
      3157290713U,
      2560960102U,
      1447622437U,
      4284372637U,
      216884176U,
      2086908623U,
      1879786977U,
      3588903153U,
      2242455666U,
      2938092967U,
      3559082096U,
      2810645491U,
      758861177U,
      1121993112U,
      215018983U,
      642190776U,
      4169236812U,
      1196255959U,
      2081185372U,
      3508738393U,
      941322904U,
      4124243163U,
      2877523539U,
      1848581667U,
      2205260958U,
      3180453958U,
      2589345134U,
      3694731276U,
      550028657U,
      2519456284U,
      3789985535U,
      2973870856U,
      2093648313U,
      443148163U,
      46942275U,
      2734146937U,
      1117713533U,
      1115362972U,
      1523183689U,
      3717140224U,
      1551984063U
        };
        internal static readonly uint[] S2 = new uint[256]
        {
      522195092U,
      4010518363U,
      1776537470U,
      960447360U,
      4267822970U,
      4005896314U,
      1435016340U,
      1929119313U,
      2913464185U,
      1310552629U,
      3579470798U,
      3724818106U,
      2579771631U,
      1594623892U,
      417127293U,
      2715217907U,
      2696228731U,
      1508390405U,
      3994398868U,
      3925858569U,
      3695444102U,
      4019471449U,
      3129199795U,
      3770928635U,
      3520741761U,
      990456497U,
      4187484609U,
      2783367035U,
      21106139U,
      3840405339U,
      631373633U,
      3783325702U,
      532942976U,
      396095098U,
      3548038825U,
      4267192484U,
      2564721535U,
      2011709262U,
      2039648873U,
      620404603U,
      3776170075U,
      2898526339U,
      3612357925U,
      4159332703U,
      1645490516U,
      223693667U,
      1567101217U,
      3362177881U,
      1029951347U,
      3470931136U,
      3570957959U,
      1550265121U,
      119497089U,
      972513919U,
      907948164U,
      3840628539U,
      1613718692U,
      3594177948U,
      465323573U,
      2659255085U,
      654439692U,
      2575596212U,
      2699288441U,
      3127702412U,
      277098644U,
      624404830U,
      4100943870U,
      2717858591U,
      546110314U,
      2403699828U,
      3655377447U,
      1321679412U,
      4236791657U,
      1045293279U,
      4010672264U,
      895050893U,
      2319792268U,
      494945126U,
      1914543101U,
      2777056443U,
      3894764339U,
      2219737618U,
      311263384U,
      4275257268U,
      3458730721U,
      669096869U,
      3584475730U,
      3835122877U,
      3319158237U,
      3949359204U,
      2005142349U,
      2713102337U,
      2228954793U,
      3769984788U,
      569394103U,
      3855636576U,
      1425027204U,
      108000370U,
      2736431443U,
      3671869269U,
      3043122623U,
      1750473702U,
      2211081108U,
      762237499U,
      3972989403U,
      2798899386U,
      3061857628U,
      2943854345U,
      867476300U,
      964413654U,
      1591880597U,
      1594774276U,
      2179821409U,
      552026980U,
      3026064248U,
      3726140315U,
      2283577634U,
      3110545105U,
      2152310760U,
      582474363U,
      1582640421U,
      1383256631U,
      2043843868U,
      3322775884U,
      1217180674U,
      463797851U,
      2763038571U,
      480777679U,
      2718707717U,
      2289164131U,
      3118346187U,
      214354409U,
      200212307U,
      3810608407U,
      3025414197U,
      2674075964U,
      3997296425U,
      1847405948U,
      1342460550U,
      510035443U,
      4080271814U,
      815934613U,
      833030224U,
      1620250387U,
      1945732119U,
      2703661145U,
      3966000196U,
      1388869545U,
      3456054182U,
      2687178561U,
      2092620194U,
      562037615U,
      1356438536U,
      3409922145U,
      3261847397U,
      1688467115U,
      2150901366U,
      631725691U,
      3840332284U,
      549916902U,
      3455104640U,
      394546491U,
      837744717U,
      2114462948U,
      751520235U,
      2221554606U,
      2415360136U,
      3999097078U,
      2063029875U,
      803036379U,
      2702586305U,
      821456707U,
      3019566164U,
      360699898U,
      4018502092U,
      3511869016U,
      3677355358U,
      2402471449U,
      812317050U,
      49299192U,
      2570164949U,
      3259169295U,
      2816732080U,
      3331213574U,
      3101303564U,
      2156015656U,
      3705598920U,
      3546263921U,
      143268808U,
      3200304480U,
      1638124008U,
      3165189453U,
      3341807610U,
      578956953U,
      2193977524U,
      3638120073U,
      2333881532U,
      807278310U,
      658237817U,
      2969561766U,
      1641658566U,
      11683945U,
      3086995007U,
      148645947U,
      1138423386U,
      4158756760U,
      1981396783U,
      2401016740U,
      3699783584U,
      380097457U,
      2680394679U,
      2803068651U,
      3334260286U,
      441530178U,
      4016580796U,
      1375954390U,
      761952171U,
      891809099U,
      2183123478U,
      157052462U,
      3683840763U,
      1592404427U,
      341349109U,
      2438483839U,
      1417898363U,
      644327628U,
      2233032776U,
      2353769706U,
      2201510100U,
      220455161U,
      1815641738U,
      182899273U,
      2995019788U,
      3627381533U,
      3702638151U,
      2890684138U,
      1052606899U,
      588164016U,
      1681439879U,
      4038439418U,
      2405343923U,
      4229449282U,
      167996282U,
      1336969661U,
      1688053129U,
      2739224926U,
      1543734051U,
      1046297529U,
      1138201970U,
      2121126012U,
      115334942U,
      1819067631U,
      1902159161U,
      1941945968U,
      2206692869U,
      1159982321U
        };
        internal static readonly uint[] S3 = new uint[256]
        {
      2381300288U,
      637164959U,
      3952098751U,
      3893414151U,
      1197506559U,
      916448331U,
      2350892612U,
      2932787856U,
      3199334847U,
      4009478890U,
      3905886544U,
      1373570990U,
      2450425862U,
      4037870920U,
      3778841987U,
      2456817877U,
      286293407U,
      124026297U,
      3001279700U,
      1028597854U,
      3115296800U,
      4208886496U,
      2691114635U,
      2188540206U,
      1430237888U,
      1218109995U,
      3572471700U,
      308166588U,
      570424558U,
      2187009021U,
      2455094765U,
      307733056U,
      1310360322U,
      3135275007U,
      1384269543U,
      2388071438U,
      863238079U,
      2359263624U,
      2801553128U,
      3380786597U,
      2831162807U,
      1470087780U,
      1728663345U,
      4072488799U,
      1090516929U,
      532123132U,
      2389430977U,
      1132193179U,
      2578464191U,
      3051079243U,
      1670234342U,
      1434557849U,
      2711078940U,
      1241591150U,
      3314043432U,
      3435360113U,
      3091448339U,
      1812415473U,
      2198440252U,
      267246943U,
      796911696U,
      3619716990U,
      38830015U,
      1526438404U,
      2806502096U,
      374413614U,
      2943401790U,
      1489179520U,
      1603809326U,
      1920779204U,
      168801282U,
      260042626U,
      2358705581U,
      1563175598U,
      2397674057U,
      1356499128U,
      2217211040U,
      514611088U,
      2037363785U,
      2186468373U,
      4022173083U,
      2792511869U,
      2913485016U,
      1173701892U,
      4200428547U,
      3896427269U,
      1334932762U,
      2455136706U,
      602925377U,
      2835607854U,
      1613172210U,
      41346230U,
      2499634548U,
      2457437618U,
      2188827595U,
      41386358U,
      4172255629U,
      1313404830U,
      2405527007U,
      3801973774U,
      2217704835U,
      873260488U,
      2528884354U,
      2478092616U,
      4012915883U,
      2555359016U,
      2006953883U,
      2463913485U,
      575479328U,
      2218240648U,
      2099895446U,
      660001756U,
      2341502190U,
      3038761536U,
      3888151779U,
      3848713377U,
      3286851934U,
      1022894237U,
      1620365795U,
      3449594689U,
      1551255054U,
      15374395U,
      3570825345U,
      4249311020U,
      4151111129U,
      3181912732U,
      310226346U,
      1133119310U,
      530038928U,
      136043402U,
      2476768958U,
      3107506709U,
      2544909567U,
      1036173560U,
      2367337196U,
      1681395281U,
      1758231547U,
      3641649032U,
      306774401U,
      1575354324U,
      3716085866U,
      1990386196U,
      3114533736U,
      2455606671U,
      1262092282U,
      3124342505U,
      2768229131U,
      4210529083U,
      1833535011U,
      423410938U,
      660763973U,
      2187129978U,
      1639812000U,
      3508421329U,
      3467445492U,
      310289298U,
      272797111U,
      2188552562U,
      2456863912U,
      310240523U,
      677093832U,
      1013118031U,
      901835429U,
      3892695601U,
      1116285435U,
      3036471170U,
      1337354835U,
      243122523U,
      520626091U,
      277223598U,
      4244441197U,
      4194248841U,
      1766575121U,
      594173102U,
      316590669U,
      742362309U,
      3536858622U,
      4176435350U,
      3838792410U,
      2501204839U,
      1229605004U,
      3115755532U,
      1552908988U,
      2312334149U,
      979407927U,
      3959474601U,
      1148277331U,
      176638793U,
      3614686272U,
      2083809052U,
      40992502U,
      1340822838U,
      2731552767U,
      3535757508U,
      3560899520U,
      1354035053U,
      122129617U,
      7215240U,
      2732932949U,
      3118912700U,
      2718203926U,
      2539075635U,
      3609230695U,
      3725561661U,
      1928887091U,
      2882293555U,
      1988674909U,
      2063640240U,
      2491088897U,
      1459647954U,
      4189817080U,
      2302804382U,
      1113892351U,
      2237858528U,
      1927010603U,
      4002880361U,
      1856122846U,
      1594404395U,
      2944033133U,
      3855189863U,
      3474975698U,
      1643104450U,
      4054590833U,
      3431086530U,
      1730235576U,
      2984608721U,
      3084664418U,
      2131803598U,
      4178205752U,
      267404349U,
      1617849798U,
      1616132681U,
      1462223176U,
      736725533U,
      2327058232U,
      551665188U,
      2945899023U,
      1749386277U,
      2575514597U,
      1611482493U,
      674206544U,
      2201269090U,
      3642560800U,
      728599968U,
      1680547377U,
      2620414464U,
      1388111496U,
      453204106U,
      4156223445U,
      1094905244U,
      2754698257U,
      2201108165U,
      3757000246U,
      2704524545U,
      3922940700U,
      3996465027U
        };
        internal static readonly uint[] S4 = new uint[256]
        {
      2645754912U,
      532081118U,
      2814278639U,
      3530793624U,
      1246723035U,
      1689095255U,
      2236679235U,
      4194438865U,
      2116582143U,
      3859789411U,
      157234593U,
      2045505824U,
      4245003587U,
      1687664561U,
      4083425123U,
      605965023U,
      672431967U,
      1336064205U,
      3376611392U,
      214114848U,
      4258466608U,
      3232053071U,
      489488601U,
      605322005U,
      3998028058U,
      264917351U,
      1912574028U,
      756637694U,
      436560991U,
      202637054U,
      135989450U,
      85393697U,
      2152923392U,
      3896401662U,
      2895836408U,
      2145855233U,
      3535335007U,
      115294817U,
      3147733898U,
      1922296357U,
      3464822751U,
      4117858305U,
      1037454084U,
      2725193275U,
      2127856640U,
      1417604070U,
      1148013728U,
      1827919605U,
      642362335U,
      2929772533U,
      909348033U,
      1346338451U,
      3547799649U,
      297154785U,
      1917849091U,
      4161712827U,
      2883604526U,
      3968694238U,
      1469521537U,
      3780077382U,
      3375584256U,
      1763717519U,
      136166297U,
      4290970789U,
      1295325189U,
      2134727907U,
      2798151366U,
      1566297257U,
      3672928234U,
      2677174161U,
      2672173615U,
      965822077U,
      2780786062U,
      289653839U,
      1133871874U,
      3491843819U,
      35685304U,
      1068898316U,
      418943774U,
      672553190U,
      642281022U,
      2346158704U,
      1954014401U,
      3037126780U,
      4079815205U,
      2030668546U,
      3840588673U,
      672283427U,
      1776201016U,
      359975446U,
      3750173538U,
      555499703U,
      2769985273U,
      1324923U,
      69110472U,
      152125443U,
      3176785106U,
      3822147285U,
      1340634837U,
      798073664U,
      1434183902U,
      15393959U,
      216384236U,
      1303690150U,
      3881221631U,
      3711134124U,
      3960975413U,
      106373927U,
      2578434224U,
      1455997841U,
      1801814300U,
      1578393881U,
      1854262133U,
      3188178946U,
      3258078583U,
      2302670060U,
      1539295533U,
      3505142565U,
      3078625975U,
      2372746020U,
      549938159U,
      3278284284U,
      2620926080U,
      181285381U,
      2865321098U,
      3970029511U,
      68876850U,
      488006234U,
      1728155692U,
      2608167508U,
      836007927U,
      2435231793U,
      919367643U,
      3339422534U,
      3655756360U,
      1457871481U,
      40520939U,
      1380155135U,
      797931188U,
      234455205U,
      2255801827U,
      3990488299U,
      397000196U,
      739833055U,
      3077865373U,
      2871719860U,
      4022553888U,
      772369276U,
      390177364U,
      3853951029U,
      557662966U,
      740064294U,
      1640166671U,
      1699928825U,
      3535942136U,
      622006121U,
      3625353122U,
      68743880U,
      1742502U,
      219489963U,
      1664179233U,
      1577743084U,
      1236991741U,
      410585305U,
      2366487942U,
      823226535U,
      1050371084U,
      3426619607U,
      3586839478U,
      212779912U,
      4147118561U,
      1819446015U,
      1911218849U,
      530248558U,
      3486241071U,
      3252585495U,
      2886188651U,
      3410272728U,
      2342195030U,
      20547779U,
      2982490058U,
      3032363469U,
      3631753222U,
      312714466U,
      1870521650U,
      1493008054U,
      3491686656U,
      615382978U,
      4103671749U,
      2534517445U,
      1932181U,
      2196105170U,
      278426614U,
      6369430U,
      3274544417U,
      2913018367U,
      697336853U,
      2143000447U,
      2946413531U,
      701099306U,
      1558357093U,
      2805003052U,
      3500818408U,
      2321334417U,
      3567135975U,
      216290473U,
      3591032198U,
      23009561U,
      1996984579U,
      3735042806U,
      2024298078U,
      3739440863U,
      569400510U,
      2339758983U,
      3016033873U,
      3097871343U,
      3639523026U,
      3844324983U,
      3256173865U,
      795471839U,
      2951117563U,
      4101031090U,
      4091603803U,
      3603732598U,
      971261452U,
      534414648U,
      428311343U,
      3389027175U,
      2844869880U,
      694888862U,
      1227866773U,
      2456207019U,
      3043454569U,
      2614353370U,
      3749578031U,
      3676663836U,
      459166190U,
      4132644070U,
      1794958188U,
      51825668U,
      2252611902U,
      3084671440U,
      2036672799U,
      3436641603U,
      1099053433U,
      2469121526U,
      3059204941U,
      1323291266U,
      2061838604U,
      1018778475U,
      2233344254U,
      2553501054U,
      334295216U,
      3556750194U,
      1065731521U,
      183467730U
        };
        internal static readonly uint[] S5 = new uint[256]
        {
      2127105028U,
      745436345U,
      2601412319U,
      2788391185U,
      3093987327U,
      500390133U,
      1155374404U,
      389092991U,
      150729210U,
      3891597772U,
      3523549952U,
      1935325696U,
      716645080U,
      946045387U,
      2901812282U,
      1774124410U,
      3869435775U,
      4039581901U,
      3293136918U,
      3438657920U,
      948246080U,
      363898952U,
      3867875531U,
      1286266623U,
      1598556673U,
      68334250U,
      630723836U,
      1104211938U,
      1312863373U,
      613332731U,
      2377784574U,
      1101634306U,
      441780740U,
      3129959883U,
      1917973735U,
      2510624549U,
      3238456535U,
      2544211978U,
      3308894634U,
      1299840618U,
      4076074851U,
      1756332096U,
      3977027158U,
      297047435U,
      3790297736U,
      2265573040U,
      3621810518U,
      1311375015U,
      1667687725U,
      47300608U,
      3299642885U,
      2474112369U,
      201668394U,
      1468347890U,
      576830978U,
      3594690761U,
      3742605952U,
      1958042578U,
      1747032512U,
      3558991340U,
      1408974056U,
      3366841779U,
      682131401U,
      1033214337U,
      1545599232U,
      4265137049U,
      206503691U,
      103024618U,
      2855227313U,
      1337551222U,
      2428998917U,
      2963842932U,
      4015366655U,
      3852247746U,
      2796956967U,
      3865723491U,
      3747938335U,
      247794022U,
      3755824572U,
      702416469U,
      2434691994U,
      397379957U,
      851939612U,
      2314769512U,
      218229120U,
      1380406772U,
      62274761U,
      214451378U,
      3170103466U,
      2276210409U,
      3845813286U,
      28563499U,
      446592073U,
      1693330814U,
      3453727194U,
      29968656U,
      3093872512U,
      220656637U,
      2470637031U,
      77972100U,
      1667708854U,
      1358280214U,
      4064765667U,
      2395616961U,
      325977563U,
      4277240721U,
      4220025399U,
      3605526484U,
      3355147721U,
      811859167U,
      3069544926U,
      3962126810U,
      652502677U,
      3075892249U,
      4132761541U,
      3498924215U,
      1217549313U,
      3250244479U,
      3858715919U,
      3053989961U,
      1538642152U,
      2279026266U,
      2875879137U,
      574252750U,
      3324769229U,
      2651358713U,
      1758150215U,
      141295887U,
      2719868960U,
      3515574750U,
      4093007735U,
      4194485238U,
      1082055363U,
      3417560400U,
      395511885U,
      2966884026U,
      179534037U,
      3646028556U,
      3738688086U,
      1092926436U,
      2496269142U,
      257381841U,
      3772900718U,
      1636087230U,
      1477059743U,
      2499234752U,
      3811018894U,
      2675660129U,
      3285975680U,
      90732309U,
      1684827095U,
      1150307763U,
      1723134115U,
      3237045386U,
      1769919919U,
      1240018934U,
      815675215U,
      750138730U,
      2239792499U,
      1234303040U,
      1995484674U,
      138143821U,
      675421338U,
      1145607174U,
      1936608440U,
      3238603024U,
      2345230278U,
      2105974004U,
      323969391U,
      779555213U,
      3004902369U,
      2861610098U,
      1017501463U,
      2098600890U,
      2628620304U,
      2940611490U,
      2682542546U,
      1171473753U,
      3656571411U,
      3687208071U,
      4091869518U,
      393037935U,
      159126506U,
      1662887367U,
      1147106178U,
      391545844U,
      3452332695U,
      1891500680U,
      3016609650U,
      1851642611U,
      546529401U,
      1167818917U,
      3194020571U,
      2848076033U,
      3953471836U,
      575554290U,
      475796850U,
      4134673196U,
      450035699U,
      2351251534U,
      844027695U,
      1080539133U,
      86184846U,
      1554234488U,
      3692025454U,
      1972511363U,
      2018339607U,
      1491841390U,
      1141460869U,
      1061690759U,
      4244549243U,
      2008416118U,
      2351104703U,
      2868147542U,
      1598468138U,
      722020353U,
      1027143159U,
      212344630U,
      1387219594U,
      1725294528U,
      3745187956U,
      2500153616U,
      458938280U,
      4129215917U,
      1828119673U,
      544571780U,
      3503225445U,
      2297937496U,
      1241802790U,
      267843827U,
      2694610800U,
      1397140384U,
      1558801448U,
      3782667683U,
      1806446719U,
      929573330U,
      2234912681U,
      400817706U,
      616011623U,
      4121520928U,
      3603768725U,
      1761550015U,
      1968522284U,
      4053731006U,
      4192232858U,
      4005120285U,
      872482584U,
      3140537016U,
      3894607381U,
      2287405443U,
      1963876937U,
      3663887957U,
      1584857000U,
      2975024454U,
      1833426440U,
      4025083860U
        };
        internal static readonly uint[] S6 = new uint[256]
        {
      4143615901U,
      749497569U,
      1285769319U,
      3795025788U,
      2514159847U,
      23610292U,
      3974978748U,
      844452780U,
      3214870880U,
      3751928557U,
      2213566365U,
      1676510905U,
      448177848U,
      3730751033U,
      4086298418U,
      2307502392U,
      871450977U,
      3222878141U,
      4110862042U,
      3831651966U,
      2735270553U,
      1310974780U,
      2043402188U,
      1218528103U,
      2736035353U,
      4274605013U,
      2702448458U,
      3936360550U,
      2693061421U,
      162023535U,
      2827510090U,
      687910808U,
      23484817U,
      3784910947U,
      3371371616U,
      779677500U,
      3503626546U,
      3473927188U,
      4157212626U,
      3500679282U,
      4248902014U,
      2466621104U,
      3899384794U,
      1958663117U,
      925738300U,
      1283408968U,
      3669349440U,
      1840910019U,
      137959847U,
      2679828185U,
      1239142320U,
      1315376211U,
      1547541505U,
      1690155329U,
      739140458U,
      3128809933U,
      3933172616U,
      3876308834U,
      905091803U,
      1548541325U,
      4040461708U,
      3095483362U,
      144808038U,
      451078856U,
      676114313U,
      2861728291U,
      2469707347U,
      993665471U,
      373509091U,
      2599041286U,
      4025009006U,
      4170239449U,
      2149739950U,
      3275793571U,
      3749616649U,
      2794760199U,
      1534877388U,
      572371878U,
      2590613551U,
      1753320020U,
      3467782511U,
      1405125690U,
      4270405205U,
      633333386U,
      3026356924U,
      3475123903U,
      632057672U,
      2846462855U,
      1404951397U,
      3882875879U,
      3915906424U,
      195638627U,
      2385783745U,
      3902872553U,
      1233155085U,
      3355999740U,
      2380578713U,
      2702246304U,
      2144565621U,
      3663341248U,
      3894384975U,
      2502479241U,
      4248018925U,
      3094885567U,
      1594115437U,
      572884632U,
      3385116731U,
      767645374U,
      1331858858U,
      1475698373U,
      3793881790U,
      3532746431U,
      1321687957U,
      619889600U,
      1121017241U,
      3440213920U,
      2070816767U,
      2833025776U,
      1933951238U,
      4095615791U,
      890643334U,
      3874130214U,
      859025556U,
      360630002U,
      925594799U,
      1764062180U,
      3920222280U,
      4078305929U,
      979562269U,
      2810700344U,
      4087740022U,
      1949714515U,
      546639971U,
      1165388173U,
      3069891591U,
      1495988560U,
      922170659U,
      1291546247U,
      2107952832U,
      1813327274U,
      3406010024U,
      3306028637U,
      4241950635U,
      153207855U,
      2313154747U,
      1608695416U,
      1150242611U,
      1967526857U,
      721801357U,
      1220138373U,
      3691287617U,
      3356069787U,
      2112743302U,
      3281662835U,
      1111556101U,
      1778980689U,
      250857638U,
      2298507990U,
      673216130U,
      2846488510U,
      3207751581U,
      3562756981U,
      3008625920U,
      3417367384U,
      2198807050U,
      529510932U,
      3547516680U,
      3426503187U,
      2364944742U,
      102533054U,
      2294910856U,
      1617093527U,
      1204784762U,
      3066581635U,
      1019391227U,
      1069574518U,
      1317995090U,
      1691889997U,
      3661132003U,
      510022745U,
      3238594800U,
      1362108837U,
      1817929911U,
      2184153760U,
      805817662U,
      1953603311U,
      3699844737U,
      120799444U,
      2118332377U,
      207536705U,
      2282301548U,
      4120041617U,
      145305846U,
      2508124933U,
      3086745533U,
      3261524335U,
      1877257368U,
      2977164480U,
      3160454186U,
      2503252186U,
      4221677074U,
      759945014U,
      254147243U,
      2767453419U,
      3801518371U,
      629083197U,
      2471014217U,
      907280572U,
      3900796746U,
      940896768U,
      2751021123U,
      2625262786U,
      3161476951U,
      3661752313U,
      3260732218U,
      1425318020U,
      2977912069U,
      1496677566U,
      3988592072U,
      2140652971U,
      3126511541U,
      3069632175U,
      977771578U,
      1392695845U,
      1698528874U,
      1411812681U,
      1369733098U,
      1343739227U,
      3620887944U,
      1142123638U,
      67414216U,
      3102056737U,
      3088749194U,
      1626167401U,
      2546293654U,
      3941374235U,
      697522451U,
      33404913U,
      143560186U,
      2595682037U,
      994885535U,
      1247667115U,
      3859094837U,
      2699155541U,
      3547024625U,
      4114935275U,
      2968073508U,
      3199963069U,
      2732024527U,
      1237921620U,
      951448369U,
      1898488916U,
      1211705605U,
      2790989240U,
      2233243581U,
      3598044975U
        };
        internal static readonly uint[] S7 = new uint[256]
        {
      2246066201U,
      858518887U,
      1714274303U,
      3485882003U,
      713916271U,
      2879113490U,
      3730835617U,
      539548191U,
      36158695U,
      1298409750U,
      419087104U,
      1358007170U,
      749914897U,
      2989680476U,
      1261868530U,
      2995193822U,
      2690628854U,
      3443622377U,
      3780124940U,
      3796824509U,
      2976433025U,
      4259637129U,
      1551479000U,
      512490819U,
      1296650241U,
      951993153U,
      2436689437U,
      2460458047U,
      144139966U,
      3136204276U,
      310820559U,
      3068840729U,
      643875328U,
      1969602020U,
      1680088954U,
      2185813161U,
      3283332454U,
      672358534U,
      198762408U,
      896343282U,
      276269502U,
      3014846926U,
      84060815U,
      197145886U,
      376173866U,
      3943890818U,
      3813173521U,
      3545068822U,
      1316698879U,
      1598252827U,
      2633424951U,
      1233235075U,
      859989710U,
      2358460855U,
      3503838400U,
      3409603720U,
      1203513385U,
      1193654839U,
      2792018475U,
      2060853022U,
      207403770U,
      1144516871U,
      3068631394U,
      1121114134U,
      177607304U,
      3785736302U,
      326409831U,
      1929119770U,
      2983279095U,
      4183308101U,
      3474579288U,
      3200513878U,
      3228482096U,
      119610148U,
      1170376745U,
      3378393471U,
      3163473169U,
      951863017U,
      3337026068U,
      3135789130U,
      2907618374U,
      1183797387U,
      2015970143U,
      4045674555U,
      2182986399U,
      2952138740U,
      3928772205U,
      384012900U,
      2454997643U,
      10178499U,
      2879818989U,
      2596892536U,
      111523738U,
      2995089006U,
      451689641U,
      3196290696U,
      235406569U,
      1441906262U,
      3890558523U,
      3013735005U,
      4158569349U,
      1644036924U,
      376726067U,
      1006849064U,
      3664579700U,
      2041234796U,
      1021632941U,
      1374734338U,
      2566452058U,
      371631263U,
      4007144233U,
      490221539U,
      206551450U,
      3140638584U,
      1053219195U,
      1853335209U,
      3412429660U,
      3562156231U,
      735133835U,
      1623211703U,
      3104214392U,
      2738312436U,
      4096837757U,
      3366392578U,
      3110964274U,
      3956598718U,
      3196820781U,
      2038037254U,
      3877786376U,
      2339753847U,
      300912036U,
      3766732888U,
      2372630639U,
      1516443558U,
      4200396704U,
      1574567987U,
      4069441456U,
      4122592016U,
      2699739776U,
      146372218U,
      2748961456U,
      2043888151U,
      35287437U,
      2596680554U,
      655490400U,
      1132482787U,
      110692520U,
      1031794116U,
      2188192751U,
      1324057718U,
      1217253157U,
      919197030U,
      686247489U,
      3261139658U,
      1028237775U,
      3135486431U,
      3059715558U,
      2460921700U,
      986174950U,
      2661811465U,
      4062904701U,
      2752986992U,
      3709736643U,
      367056889U,
      1353824391U,
      731860949U,
      1650113154U,
      1778481506U,
      784341916U,
      357075625U,
      3608602432U,
      1074092588U,
      2480052770U,
      3811426202U,
      92751289U,
      877911070U,
      3600361838U,
      1231880047U,
      480201094U,
      3756190983U,
      3094495953U,
      434011822U,
      87971354U,
      363687820U,
      1717726236U,
      1901380172U,
      3926403882U,
      2481662265U,
      400339184U,
      1490350766U,
      2661455099U,
      1389319756U,
      2558787174U,
      784598401U,
      1983468483U,
      30828846U,
      3550527752U,
      2716276238U,
      3841122214U,
      1765724805U,
      1955612312U,
      1277890269U,
      1333098070U,
      1564029816U,
      2704417615U,
      1026694237U,
      3287671188U,
      1260819201U,
      3349086767U,
      1016692350U,
      1582273796U,
      1073413053U,
      1995943182U,
      694588404U,
      1025494639U,
      3323872702U,
      3551898420U,
      4146854327U,
      453260480U,
      1316140391U,
      1435673405U,
      3038941953U,
      3486689407U,
      1622062951U,
      403978347U,
      817677117U,
      950059133U,
      4246079218U,
      3278066075U,
      1486738320U,
      1417279718U,
      481875527U,
      2549965225U,
      3933690356U,
      760697757U,
      1452955855U,
      3897451437U,
      1177426808U,
      1702951038U,
      4085348628U,
      2447005172U,
      1084371187U,
      3516436277U,
      3068336338U,
      1073369276U,
      1027665953U,
      3284188590U,
      1230553676U,
      1368340146U,
      2226246512U,
      267243139U,
      2274220762U,
      4070734279U,
      2497715176U,
      2423353163U,
      2504755875U
        };
        internal static readonly uint[] S8 = new uint[256]
        {
      3793104909U,
      3151888380U,
      2817252029U,
      895778965U,
      2005530807U,
      3871412763U,
      237245952U,
      86829237U,
      296341424U,
      3851759377U,
      3974600970U,
      2475086196U,
      709006108U,
      1994621201U,
      2972577594U,
      937287164U,
      3734691505U,
      168608556U,
      3189338153U,
      2225080640U,
      3139713551U,
      3033610191U,
      3025041904U,
      77524477U,
      185966941U,
      1208824168U,
      2344345178U,
      1721625922U,
      3354191921U,
      1066374631U,
      1927223579U,
      1971335949U,
      2483503697U,
      1551748602U,
      2881383779U,
      2856329572U,
      3003241482U,
      48746954U,
      1398218158U,
      2050065058U,
      313056748U,
      4255789917U,
      393167848U,
      1912293076U,
      940740642U,
      3465845460U,
      3091687853U,
      2522601570U,
      2197016661U,
      1727764327U,
      364383054U,
      492521376U,
      1291706479U,
      3264136376U,
      1474851438U,
      1685747964U,
      2575719748U,
      1619776915U,
      1814040067U,
      970743798U,
      1561002147U,
      2925768690U,
      2123093554U,
      1880132620U,
      3151188041U,
      697884420U,
      2550985770U,
      2607674513U,
      2659114323U,
      110200136U,
      1489731079U,
      997519150U,
      1378877361U,
      3527870668U,
      478029773U,
      2766872923U,
      1022481122U,
      431258168U,
      1112503832U,
      897933369U,
      2635587303U,
      669726182U,
      3383752315U,
      918222264U,
      163866573U,
      3246985393U,
      3776823163U,
      114105080U,
      1903216136U,
      761148244U,
      3571337562U,
      1690750982U,
      3166750252U,
      1037045171U,
      1888456500U,
      2010454850U,
      642736655U,
      616092351U,
      365016990U,
      1185228132U,
      4174898510U,
      1043824992U,
      2023083429U,
      2241598885U,
      3863320456U,
      3279669087U,
      3674716684U,
      108438443U,
      2132974366U,
      830746235U,
      606445527U,
      4173263986U,
      2204105912U,
      1844756978U,
      2532684181U,
      4245352700U,
      2969441100U,
      3796921661U,
      1335562986U,
      4061524517U,
      2720232303U,
      2679424040U,
      634407289U,
      885462008U,
      3294724487U,
      3933892248U,
      2094100220U,
      339117932U,
      4048830727U,
      3202280980U,
      1458155303U,
      2689246273U,
      1022871705U,
      2464987878U,
      3714515309U,
      353796843U,
      2822958815U,
      4256850100U,
      4052777845U,
      551748367U,
      618185374U,
      3778635579U,
      4020649912U,
      1904685140U,
      3069366075U,
      2670879810U,
      3407193292U,
      2954511620U,
      4058283405U,
      2219449317U,
      3135758300U,
      1120655984U,
      3447565834U,
      1474845562U,
      3577699062U,
      550456716U,
      3466908712U,
      2043752612U,
      881257467U,
      869518812U,
      2005220179U,
      938474677U,
      3305539448U,
      3850417126U,
      1315485940U,
      3318264702U,
      226533026U,
      965733244U,
      321539988U,
      1136104718U,
      804158748U,
      573969341U,
      3708209826U,
      937399083U,
      3290727049U,
      2901666755U,
      1461057207U,
      4013193437U,
      4066861423U,
      3242773476U,
      2421326174U,
      1581322155U,
      3028952165U,
      786071460U,
      3900391652U,
      3918438532U,
      1485433313U,
      4023619836U,
      3708277595U,
      3678951060U,
      953673138U,
      1467089153U,
      1930354364U,
      1533292819U,
      2492563023U,
      1346121658U,
      1685000834U,
      1965281866U,
      3765933717U,
      4190206607U,
      2052792609U,
      3515332758U,
      690371149U,
      3125873887U,
      2180283551U,
      2903598061U,
      3933952357U,
      436236910U,
      289419410U,
      14314871U,
      1242357089U,
      2904507907U,
      1616633776U,
      2666382180U,
      585885352U,
      3471299210U,
      2699507360U,
      1432659641U,
      277164553U,
      3354103607U,
      770115018U,
      2303809295U,
      3741942315U,
      3177781868U,
      2853364978U,
      2269453327U,
      3774259834U,
      987383833U,
      1290892879U,
      225909803U,
      1741533526U,
      890078084U,
      1496906255U,
      1111072499U,
      916028167U,
      243534141U,
      1252605537U,
      2204162171U,
      531204876U,
      290011180U,
      3916834213U,
      102027703U,
      237315147U,
      209093447U,
      1486785922U,
      220223953U,
      2758195998U,
      4175039106U,
      82940208U,
      3127791296U,
      2569425252U,
      518464269U,
      1353887104U,
      3941492737U,
      2377294467U,
      3935040926U
        };
        internal static readonly int MAX_ROUNDS = 16;
        internal static readonly int RED_ROUNDS = 12;
        private int[] _Kr = new int[17];
        private uint[] _Km = new uint[17];
        private bool _encrypting;
        private byte[] _workingKey;
        private int _rounds = MAX_ROUNDS;

        public virtual void Init( bool forEncryption, ICipherParameters parameters )
        {
            if (!(parameters is KeyParameter))
                throw new ArgumentException( "Invalid parameter passed to " + this.AlgorithmName + " init - " + Platform.GetTypeName( parameters ) );
            this._encrypting = forEncryption;
            this._workingKey = ((KeyParameter)parameters).GetKey();
            this.SetKey( this._workingKey );
        }

        public virtual string AlgorithmName => "CAST5";

        public virtual bool IsPartialBlockOkay => false;

        public virtual int ProcessBlock( byte[] input, int inOff, byte[] output, int outOff )
        {
            int blockSize = this.GetBlockSize();
            if (this._workingKey == null)
                throw new InvalidOperationException( this.AlgorithmName + " not initialised" );
            Check.DataLength( input, inOff, blockSize, "input buffer too short" );
            Check.OutputLength( output, outOff, blockSize, "output buffer too short" );
            return this._encrypting ? this.EncryptBlock( input, inOff, output, outOff ) : this.DecryptBlock( input, inOff, output, outOff );
        }

        public virtual void Reset()
        {
        }

        public virtual int GetBlockSize() => 8;

        internal virtual void SetKey( byte[] key )
        {
            if (key.Length < 11)
                this._rounds = RED_ROUNDS;
            int[] b1 = new int[16];
            int[] b2 = new int[16];
            for (int index = 0; index < key.Length; ++index)
                b2[index] = key[index] & byte.MaxValue;
            uint num1 = IntsTo32bits( b2, 0 );
            uint num2 = IntsTo32bits( b2, 4 );
            uint num3 = IntsTo32bits( b2, 8 );
            uint num4 = IntsTo32bits( b2, 12 );
            Bits32ToInts( num1 ^ S5[b2[13]] ^ S6[b2[15]] ^ S7[b2[12]] ^ S8[b2[14]] ^ S7[b2[8]], b1, 0 );
            Bits32ToInts( num3 ^ S5[b1[0]] ^ S6[b1[2]] ^ S7[b1[1]] ^ S8[b1[3]] ^ S8[b2[10]], b1, 4 );
            Bits32ToInts( num4 ^ S5[b1[7]] ^ S6[b1[6]] ^ S7[b1[5]] ^ S8[b1[4]] ^ S5[b2[9]], b1, 8 );
            Bits32ToInts( num2 ^ S5[b1[10]] ^ S6[b1[9]] ^ S7[b1[11]] ^ S8[b1[8]] ^ S6[b2[11]], b1, 12 );
            this._Km[1] = S5[b1[8]] ^ S6[b1[9]] ^ S7[b1[7]] ^ S8[b1[6]] ^ S5[b1[2]];
            this._Km[2] = S5[b1[10]] ^ S6[b1[11]] ^ S7[b1[5]] ^ S8[b1[4]] ^ S6[b1[6]];
            this._Km[3] = S5[b1[12]] ^ S6[b1[13]] ^ S7[b1[3]] ^ S8[b1[2]] ^ S7[b1[9]];
            this._Km[4] = S5[b1[14]] ^ S6[b1[15]] ^ S7[b1[1]] ^ S8[b1[0]] ^ S8[b1[12]];
            uint num5 = IntsTo32bits( b1, 0 );
            uint num6 = IntsTo32bits( b1, 4 );
            uint num7 = IntsTo32bits( b1, 8 );
            uint num8 = IntsTo32bits( b1, 12 );
            Bits32ToInts( num7 ^ S5[b1[5]] ^ S6[b1[7]] ^ S7[b1[4]] ^ S8[b1[6]] ^ S7[b1[0]], b2, 0 );
            Bits32ToInts( num5 ^ S5[b2[0]] ^ S6[b2[2]] ^ S7[b2[1]] ^ S8[b2[3]] ^ S8[b1[2]], b2, 4 );
            Bits32ToInts( num6 ^ S5[b2[7]] ^ S6[b2[6]] ^ S7[b2[5]] ^ S8[b2[4]] ^ S5[b1[1]], b2, 8 );
            Bits32ToInts( num8 ^ S5[b2[10]] ^ S6[b2[9]] ^ S7[b2[11]] ^ S8[b2[8]] ^ S6[b1[3]], b2, 12 );
            this._Km[5] = S5[b2[3]] ^ S6[b2[2]] ^ S7[b2[12]] ^ S8[b2[13]] ^ S5[b2[8]];
            this._Km[6] = S5[b2[1]] ^ S6[b2[0]] ^ S7[b2[14]] ^ S8[b2[15]] ^ S6[b2[13]];
            this._Km[7] = S5[b2[7]] ^ S6[b2[6]] ^ S7[b2[8]] ^ S8[b2[9]] ^ S7[b2[3]];
            this._Km[8] = S5[b2[5]] ^ S6[b2[4]] ^ S7[b2[10]] ^ S8[b2[11]] ^ S8[b2[7]];
            uint num9 = IntsTo32bits( b2, 0 );
            uint num10 = IntsTo32bits( b2, 4 );
            uint num11 = IntsTo32bits( b2, 8 );
            uint num12 = IntsTo32bits( b2, 12 );
            Bits32ToInts( num9 ^ S5[b2[13]] ^ S6[b2[15]] ^ S7[b2[12]] ^ S8[b2[14]] ^ S7[b2[8]], b1, 0 );
            Bits32ToInts( num11 ^ S5[b1[0]] ^ S6[b1[2]] ^ S7[b1[1]] ^ S8[b1[3]] ^ S8[b2[10]], b1, 4 );
            Bits32ToInts( num12 ^ S5[b1[7]] ^ S6[b1[6]] ^ S7[b1[5]] ^ S8[b1[4]] ^ S5[b2[9]], b1, 8 );
            Bits32ToInts( num10 ^ S5[b1[10]] ^ S6[b1[9]] ^ S7[b1[11]] ^ S8[b1[8]] ^ S6[b2[11]], b1, 12 );
            this._Km[9] = S5[b1[3]] ^ S6[b1[2]] ^ S7[b1[12]] ^ S8[b1[13]] ^ S5[b1[9]];
            this._Km[10] = S5[b1[1]] ^ S6[b1[0]] ^ S7[b1[14]] ^ S8[b1[15]] ^ S6[b1[12]];
            this._Km[11] = S5[b1[7]] ^ S6[b1[6]] ^ S7[b1[8]] ^ S8[b1[9]] ^ S7[b1[2]];
            this._Km[12] = S5[b1[5]] ^ S6[b1[4]] ^ S7[b1[10]] ^ S8[b1[11]] ^ S8[b1[6]];
            uint num13 = IntsTo32bits( b1, 0 );
            uint num14 = IntsTo32bits( b1, 4 );
            uint num15 = IntsTo32bits( b1, 8 );
            uint num16 = IntsTo32bits( b1, 12 );
            Bits32ToInts( num15 ^ S5[b1[5]] ^ S6[b1[7]] ^ S7[b1[4]] ^ S8[b1[6]] ^ S7[b1[0]], b2, 0 );
            Bits32ToInts( num13 ^ S5[b2[0]] ^ S6[b2[2]] ^ S7[b2[1]] ^ S8[b2[3]] ^ S8[b1[2]], b2, 4 );
            Bits32ToInts( num14 ^ S5[b2[7]] ^ S6[b2[6]] ^ S7[b2[5]] ^ S8[b2[4]] ^ S5[b1[1]], b2, 8 );
            Bits32ToInts( num16 ^ S5[b2[10]] ^ S6[b2[9]] ^ S7[b2[11]] ^ S8[b2[8]] ^ S6[b1[3]], b2, 12 );
            this._Km[13] = S5[b2[8]] ^ S6[b2[9]] ^ S7[b2[7]] ^ S8[b2[6]] ^ S5[b2[3]];
            this._Km[14] = S5[b2[10]] ^ S6[b2[11]] ^ S7[b2[5]] ^ S8[b2[4]] ^ S6[b2[7]];
            this._Km[15] = S5[b2[12]] ^ S6[b2[13]] ^ S7[b2[3]] ^ S8[b2[2]] ^ S7[b2[8]];
            this._Km[16] = S5[b2[14]] ^ S6[b2[15]] ^ S7[b2[1]] ^ S8[b2[0]] ^ S8[b2[13]];
            uint num17 = IntsTo32bits( b2, 0 );
            uint num18 = IntsTo32bits( b2, 4 );
            uint num19 = IntsTo32bits( b2, 8 );
            uint num20 = IntsTo32bits( b2, 12 );
            Bits32ToInts( num17 ^ S5[b2[13]] ^ S6[b2[15]] ^ S7[b2[12]] ^ S8[b2[14]] ^ S7[b2[8]], b1, 0 );
            Bits32ToInts( num19 ^ S5[b1[0]] ^ S6[b1[2]] ^ S7[b1[1]] ^ S8[b1[3]] ^ S8[b2[10]], b1, 4 );
            Bits32ToInts( num20 ^ S5[b1[7]] ^ S6[b1[6]] ^ S7[b1[5]] ^ S8[b1[4]] ^ S5[b2[9]], b1, 8 );
            Bits32ToInts( num18 ^ S5[b1[10]] ^ S6[b1[9]] ^ S7[b1[11]] ^ S8[b1[8]] ^ S6[b2[11]], b1, 12 );
            this._Kr[1] = ((int)S5[b1[8]] ^ (int)S6[b1[9]] ^ (int)S7[b1[7]] ^ (int)S8[b1[6]] ^ (int)S5[b1[2]]) & 31;
            this._Kr[2] = ((int)S5[b1[10]] ^ (int)S6[b1[11]] ^ (int)S7[b1[5]] ^ (int)S8[b1[4]] ^ (int)S6[b1[6]]) & 31;
            this._Kr[3] = ((int)S5[b1[12]] ^ (int)S6[b1[13]] ^ (int)S7[b1[3]] ^ (int)S8[b1[2]] ^ (int)S7[b1[9]]) & 31;
            this._Kr[4] = ((int)S5[b1[14]] ^ (int)S6[b1[15]] ^ (int)S7[b1[1]] ^ (int)S8[b1[0]] ^ (int)S8[b1[12]]) & 31;
            uint num21 = IntsTo32bits( b1, 0 );
            uint num22 = IntsTo32bits( b1, 4 );
            uint num23 = IntsTo32bits( b1, 8 );
            uint num24 = IntsTo32bits( b1, 12 );
            Bits32ToInts( num23 ^ S5[b1[5]] ^ S6[b1[7]] ^ S7[b1[4]] ^ S8[b1[6]] ^ S7[b1[0]], b2, 0 );
            Bits32ToInts( num21 ^ S5[b2[0]] ^ S6[b2[2]] ^ S7[b2[1]] ^ S8[b2[3]] ^ S8[b1[2]], b2, 4 );
            Bits32ToInts( num22 ^ S5[b2[7]] ^ S6[b2[6]] ^ S7[b2[5]] ^ S8[b2[4]] ^ S5[b1[1]], b2, 8 );
            Bits32ToInts( num24 ^ S5[b2[10]] ^ S6[b2[9]] ^ S7[b2[11]] ^ S8[b2[8]] ^ S6[b1[3]], b2, 12 );
            this._Kr[5] = ((int)S5[b2[3]] ^ (int)S6[b2[2]] ^ (int)S7[b2[12]] ^ (int)S8[b2[13]] ^ (int)S5[b2[8]]) & 31;
            this._Kr[6] = ((int)S5[b2[1]] ^ (int)S6[b2[0]] ^ (int)S7[b2[14]] ^ (int)S8[b2[15]] ^ (int)S6[b2[13]]) & 31;
            this._Kr[7] = ((int)S5[b2[7]] ^ (int)S6[b2[6]] ^ (int)S7[b2[8]] ^ (int)S8[b2[9]] ^ (int)S7[b2[3]]) & 31;
            this._Kr[8] = ((int)S5[b2[5]] ^ (int)S6[b2[4]] ^ (int)S7[b2[10]] ^ (int)S8[b2[11]] ^ (int)S8[b2[7]]) & 31;
            uint num25 = IntsTo32bits( b2, 0 );
            uint num26 = IntsTo32bits( b2, 4 );
            uint num27 = IntsTo32bits( b2, 8 );
            uint num28 = IntsTo32bits( b2, 12 );
            Bits32ToInts( num25 ^ S5[b2[13]] ^ S6[b2[15]] ^ S7[b2[12]] ^ S8[b2[14]] ^ S7[b2[8]], b1, 0 );
            Bits32ToInts( num27 ^ S5[b1[0]] ^ S6[b1[2]] ^ S7[b1[1]] ^ S8[b1[3]] ^ S8[b2[10]], b1, 4 );
            Bits32ToInts( num28 ^ S5[b1[7]] ^ S6[b1[6]] ^ S7[b1[5]] ^ S8[b1[4]] ^ S5[b2[9]], b1, 8 );
            Bits32ToInts( num26 ^ S5[b1[10]] ^ S6[b1[9]] ^ S7[b1[11]] ^ S8[b1[8]] ^ S6[b2[11]], b1, 12 );
            this._Kr[9] = ((int)S5[b1[3]] ^ (int)S6[b1[2]] ^ (int)S7[b1[12]] ^ (int)S8[b1[13]] ^ (int)S5[b1[9]]) & 31;
            this._Kr[10] = ((int)S5[b1[1]] ^ (int)S6[b1[0]] ^ (int)S7[b1[14]] ^ (int)S8[b1[15]] ^ (int)S6[b1[12]]) & 31;
            this._Kr[11] = ((int)S5[b1[7]] ^ (int)S6[b1[6]] ^ (int)S7[b1[8]] ^ (int)S8[b1[9]] ^ (int)S7[b1[2]]) & 31;
            this._Kr[12] = ((int)S5[b1[5]] ^ (int)S6[b1[4]] ^ (int)S7[b1[10]] ^ (int)S8[b1[11]] ^ (int)S8[b1[6]]) & 31;
            uint num29 = IntsTo32bits( b1, 0 );
            uint num30 = IntsTo32bits( b1, 4 );
            uint num31 = IntsTo32bits( b1, 8 );
            uint num32 = IntsTo32bits( b1, 12 );
            Bits32ToInts( num31 ^ S5[b1[5]] ^ S6[b1[7]] ^ S7[b1[4]] ^ S8[b1[6]] ^ S7[b1[0]], b2, 0 );
            Bits32ToInts( num29 ^ S5[b2[0]] ^ S6[b2[2]] ^ S7[b2[1]] ^ S8[b2[3]] ^ S8[b1[2]], b2, 4 );
            Bits32ToInts( num30 ^ S5[b2[7]] ^ S6[b2[6]] ^ S7[b2[5]] ^ S8[b2[4]] ^ S5[b1[1]], b2, 8 );
            Bits32ToInts( num32 ^ S5[b2[10]] ^ S6[b2[9]] ^ S7[b2[11]] ^ S8[b2[8]] ^ S6[b1[3]], b2, 12 );
            this._Kr[13] = ((int)S5[b2[8]] ^ (int)S6[b2[9]] ^ (int)S7[b2[7]] ^ (int)S8[b2[6]] ^ (int)S5[b2[3]]) & 31;
            this._Kr[14] = ((int)S5[b2[10]] ^ (int)S6[b2[11]] ^ (int)S7[b2[5]] ^ (int)S8[b2[4]] ^ (int)S6[b2[7]]) & 31;
            this._Kr[15] = ((int)S5[b2[12]] ^ (int)S6[b2[13]] ^ (int)S7[b2[3]] ^ (int)S8[b2[2]] ^ (int)S7[b2[8]]) & 31;
            this._Kr[16] = ((int)S5[b2[14]] ^ (int)S6[b2[15]] ^ (int)S7[b2[1]] ^ (int)S8[b2[0]] ^ (int)S8[b2[13]]) & 31;
        }

        internal virtual int EncryptBlock( byte[] src, int srcIndex, byte[] dst, int dstIndex )
        {
            uint uint32_1 = Pack.BE_To_UInt32( src, srcIndex );
            uint uint32_2 = Pack.BE_To_UInt32( src, srcIndex + 4 );
            uint[] result = new uint[2];
            this.CAST_Encipher( uint32_1, uint32_2, result );
            Pack.UInt32_To_BE( result[0], dst, dstIndex );
            Pack.UInt32_To_BE( result[1], dst, dstIndex + 4 );
            return 8;
        }

        internal virtual int DecryptBlock( byte[] src, int srcIndex, byte[] dst, int dstIndex )
        {
            uint uint32_1 = Pack.BE_To_UInt32( src, srcIndex );
            uint uint32_2 = Pack.BE_To_UInt32( src, srcIndex + 4 );
            uint[] result = new uint[2];
            this.CAST_Decipher( uint32_1, uint32_2, result );
            Pack.UInt32_To_BE( result[0], dst, dstIndex );
            Pack.UInt32_To_BE( result[1], dst, dstIndex + 4 );
            return 8;
        }

        internal static uint F1( uint D, uint Kmi, int Kri )
        {
            uint num1 = Kmi + D;
            uint num2 = (num1 << Kri) | (num1 >> (32 - Kri));
            return (S1[(int)(IntPtr)((num2 >> 24) & byte.MaxValue)] ^ S2[(int)(IntPtr)((num2 >> 16) & byte.MaxValue)]) - S3[(int)(IntPtr)((num2 >> 8) & byte.MaxValue)] + S4[(int)(IntPtr)(num2 & byte.MaxValue)];
        }

        internal static uint F2( uint D, uint Kmi, int Kri )
        {
            uint num1 = Kmi ^ D;
            uint num2 = (num1 << Kri) | (num1 >> (32 - Kri));
            return (S1[(int)(IntPtr)((num2 >> 24) & byte.MaxValue)] - S2[(int)(IntPtr)((num2 >> 16) & byte.MaxValue)] + S3[(int)(IntPtr)((num2 >> 8) & byte.MaxValue)]) ^ S4[(int)(IntPtr)(num2 & byte.MaxValue)];
        }

        internal static uint F3( uint D, uint Kmi, int Kri )
        {
            uint num1 = Kmi - D;
            uint num2 = (num1 << Kri) | (num1 >> (32 - Kri));
            return ((S1[(int)(IntPtr)((num2 >> 24) & byte.MaxValue)] + S2[(int)(IntPtr)((num2 >> 16) & byte.MaxValue)]) ^ S3[(int)(IntPtr)((num2 >> 8) & byte.MaxValue)]) - S4[(int)(IntPtr)(num2 & byte.MaxValue)];
        }

        internal void CAST_Encipher( uint L0, uint R0, uint[] result )
        {
            uint num1 = L0;
            uint num2 = R0;
            for (int index = 1; index <= this._rounds; ++index)
            {
                uint num3 = num1;
                uint D = num2;
                num1 = D;
                switch (index)
                {
                    case 1:
                    case 4:
                    case 7:
                    case 10:
                    case 13:
                    case 16:
                        num2 = num3 ^ F1( D, this._Km[index], this._Kr[index] );
                        break;
                    case 2:
                    case 5:
                    case 8:
                    case 11:
                    case 14:
                        num2 = num3 ^ F2( D, this._Km[index], this._Kr[index] );
                        break;
                    case 3:
                    case 6:
                    case 9:
                    case 12:
                    case 15:
                        num2 = num3 ^ F3( D, this._Km[index], this._Kr[index] );
                        break;
                }
            }
            result[0] = num2;
            result[1] = num1;
        }

        internal void CAST_Decipher( uint L16, uint R16, uint[] result )
        {
            uint num1 = L16;
            uint num2 = R16;
            for (int rounds = this._rounds; rounds > 0; --rounds)
            {
                uint num3 = num1;
                uint D = num2;
                num1 = D;
                switch (rounds - 1)
                {
                    case 0:
                    case 3:
                    case 6:
                    case 9:
                    case 12:
                    case 15:
                        num2 = num3 ^ F1( D, this._Km[rounds], this._Kr[rounds] );
                        break;
                    case 1:
                    case 4:
                    case 7:
                    case 10:
                    case 13:
                        num2 = num3 ^ F2( D, this._Km[rounds], this._Kr[rounds] );
                        break;
                    case 2:
                    case 5:
                    case 8:
                    case 11:
                    case 14:
                        num2 = num3 ^ F3( D, this._Km[rounds], this._Kr[rounds] );
                        break;
                }
            }
            result[0] = num2;
            result[1] = num1;
        }

        internal static void Bits32ToInts( uint inData, int[] b, int offset )
        {
            b[offset + 3] = (int)inData & byte.MaxValue;
            b[offset + 2] = (int)(inData >> 8) & byte.MaxValue;
            b[offset + 1] = (int)(inData >> 16) & byte.MaxValue;
            b[offset] = (int)(inData >> 24) & byte.MaxValue;
        }

        internal static uint IntsTo32bits( int[] b, int i ) => (uint)(((b[i] & byte.MaxValue) << 24) | ((b[i + 1] & byte.MaxValue) << 16) | ((b[i + 2] & byte.MaxValue) << 8) | (b[i + 3] & byte.MaxValue));
    }
}
